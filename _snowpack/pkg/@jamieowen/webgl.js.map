{"version":3,"file":"webgl.js","sources":["../../../../../packages/webgl/dist/gpgpu-particles/emitters.js","../../../../../packages/webgl/dist/gpgpu-particles/forces-init.js","../../../../../packages/webgl/dist/gpgpu-particles/read-constants.js","../../../../../packages/webgl/dist/gpgpu-particles/read-state.js"],"sourcesContent":["import { assign, ifThen, gt, float, add } from \"@thi.ng/shader-ast\";\n/**\n *\n * Advance age by decay amount, by assigning\n * decay + age to age symbol.\n *\n * Once age > 1.0, reset age to 0.0 and apply\n * dead terms.\n *\n * @param age\n * @param decay\n * @param dead\n */\nexport const advanceAgeByDecay = (age, decay, dead) => {\n    return ifThen(gt(age, float(1.0)), [assign(age, float(0.0)), ...dead], [assign(age, add(age, decay))]);\n};\n/**\n *\n * Same as @see advanceAgeByDecay(),\n * but assign an emitter term to\n * the position.\n *\n * @param age\n * @param decay\n * @param emitter\n */\nexport const advanceAgeByDecayEmit = (age, decay, position, emitter) => advanceAgeByDecay(age, decay, [assign(position, emitter)]);\n","import { assign, sym, add, vec3, mul, } from \"@thi.ng/shader-ast\";\nimport { curlNoise3 } from \"@thi.ng/shader-ast-stdlib\";\n/**\n *\n * Accumulates provided forces.\n * This is an 'inline' approach without using glsl functions.\n *\n * @example\n * // glsl output\n * vec3 transformP = position;\n * vec3 transformV = velocity;\n * transformV = transformV + vec3(0.0,0.23,0.0);\n * transformV = transformV + curlNoise(position,0.3);\n * // etc ( per force )\n *\n * transformP = position + velocity;\n * // cap velocity speed.\n *\n *\n * @param position\n * @param velocity\n * @param mass\n * @param age\n * @param forces\n */\nexport const accumulateForces = (position, velocity, mass, age, forces) => {\n    const transformP = sym(position);\n    const transformV = sym(vec3(0.0));\n    // const transformV = sym(velocity); // TODO\n    return [\n        transformP,\n        transformV,\n        ...forces.map((f) => assign(transformV, add(transformV, f(position, velocity, mass, age)))),\n        assign(transformP, add(position, transformV)),\n        // temp ts fix??\n    ];\n};\n// From Previous\n// Including velocity? - needs capping and resetting at emission point\n// const transformed = sym(\n//   add(position, add(velocity, add(gravity, mul(curl, vec3(curlScale)))))\n// );\n// No Velocity\n// const transformed = sym(\n//   add(position, add(gravity, mul(curl, curlScale)))\n// );\nexport const gravity = (constant) => {\n    return (position) => {\n        // don't return a sym term here. Probably to map cat\n        return constant;\n    };\n};\nexport const curlPosition = (scale, input) => {\n    return (position) => {\n        return mul(scale, curlNoise3(position, input));\n    };\n};\n","import { uniform, sym, texture, $x, $y, $z, $w, } from \"@thi.ng/shader-ast\";\n/**\n * Given a basic 'constants' texture ( RGBA ), and presuming\n * that r & g are mass and decay. the other two\n */\nexport const readConstants = (v_Uv) => {\n    // Decl\n    const u_constants = uniform(\"sampler2D\", \"constants\");\n    // Main\n    const con = sym(texture(u_constants, v_Uv));\n    const mass = sym($x(con));\n    const decay = sym($y(con));\n    const opt1 = sym($z(con));\n    const opt2 = sym($w(con));\n    return {\n        decl: [u_constants],\n        main: [con, mass, decay, opt1, opt2],\n    };\n};\n","import { uniform, input, sym, sub, texture, $xyz, $w, } from \"@thi.ng/shader-ast\";\n/**\n *\n * @description\n *\n * Declare setup for 2 state values,\n * read them in a\n *\n * @example\n *\n * const read = readState2();\n * return program([\n *  ...read.decl,\n *  defMain(()=>[\n *    ...read.main\n *  ])\n * ])\n */\nexport const readState2 = () => {\n    // Decl\n    const uni_state1 = uniform(\"sampler2D\", \"state_1\");\n    const uni_state2 = uniform(\"sampler2D\", \"state_2\");\n    const input_vUv = input(\"vec2\", \"vReadUV\"); // TODO: Rename vReadUV - vUv\n    // Main\n    const s1 = sym(texture(uni_state1, input_vUv));\n    const s2 = sym(texture(uni_state2, input_vUv));\n    const position = sym($xyz(s1));\n    // const velocity = sym(sub($xyz(s2), $xyz(s1)));\n    const velocity = sym(sub($xyz(s1), $xyz(s2)));\n    const age = sym($w(s1));\n    return {\n        // Enforce types.\n        // Typescript seems to only apply a union / or type on array contents ( not order )\n        decl: [uni_state1, uni_state2, input_vUv],\n        main: [s1, s2, position, velocity, age],\n    };\n};\n// ++ readState1\n"],"names":[],"mappings":"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"}