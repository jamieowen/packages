{"version":3,"file":"ast-compile-helpers-350d4721.js","sources":["../../../../../packages/webgl/dist/shaders/full-screen-read.js","../../../../../packages/webgl/dist/gpgpu/state-setup.js","../../../../../packages/webgl/dist/gpgpu-particles/lines-shader.js","../../../../../packages/webgl/dist/gpgpu-particles/points-shader.js","../../../../../packages/webgl/dist/shaders/ast-compile-helpers.js"],"sourcesContent":["import { assign, defMain, input, program, uniform, mul, vec4, add, output, $xy, sym, texture, } from \"@thi.ng/shader-ast\";\n/**\n *\n * Render a quad style geometry and\n * generate UV for GPGPU texture read.\n *\n * @param target\n */\nexport const gpgpuQuadVertexShader = (target) => {\n    const modelViewMatrix = uniform(\"mat4\", \"modelViewMatrix\", {});\n    const projectionMatrix = uniform(\"mat4\", \"projectionMatrix\");\n    const position = input(\"vec3\", \"position\");\n    const vReadUV = output(\"vec2\", \"vReadUV\");\n    return program([\n        modelViewMatrix,\n        projectionMatrix,\n        position,\n        vReadUV,\n        defMain(() => [\n            assign(vReadUV, add($xy(position), 0.5)),\n            assign(target.gl_Position, mul(projectionMatrix, mul(modelViewMatrix, vec4(position, 1.0)))),\n        ]),\n    ]);\n};\n/**\n *\n * Render 'big triangle' style geometry and\n * generate UV for GPGPU texture read.\n *\n * @param target\n */\nexport const gpgpuTriangleVertexShader = (target) => {\n    const position = input(\"vec3\", \"position\");\n    const vReadUV = output(\"vec2\", \"vReadUV\");\n    return program([\n        position,\n        vReadUV,\n        defMain(() => [\n            assign(vReadUV, mul(0.5, add($xy(position), 1.0))),\n            assign(target.gl_Position, vec4(position, 1.0)),\n        ]),\n    ]);\n};\n/**\n * UNUSED.\n * WIP for base update shader.\n * @param target\n */\nexport const gpgpuFragmentBase = (target) => {\n    const previous = uniform(\"sampler2D\", \"previous\");\n    const current = uniform(\"sampler2D\", \"current\");\n    const vReadUV = input(\"vec2\", \"vReadUV\");\n    return program([previous, current, vReadUV, defMain(() => [])]);\n};\n/**\n *\n * Writes an input texture or data texture\n * directly to the output buffer.\n * TODO: inputSource needs renaming.\n * @param target\n *\n */\nexport const gpgpuWriteOperation = (target) => {\n    const currentIn = uniform(\"sampler2D\", \"inputSource\");\n    const vReadUV = input(\"vec2\", \"vReadUV\");\n    const current = sym(texture(currentIn, vReadUV));\n    return program([\n        currentIn,\n        vReadUV,\n        defMain(() => [current, assign(target.gl_FragColor, current)]),\n    ]);\n};\n","import { GLSLVersion, targetGLSL } from \"@thi.ng/shader-ast-glsl\";\nimport { gpgpuQuadVertexShader, gpgpuTriangleVertexShader, gpgpuWriteOperation, } from \"../shaders/full-screen-read\";\nexport const gpgpuSetup = (opts) => {\n    const { width, height, count, geomType, updateProgram } = opts;\n    const targetVS = targetGLSL({\n        version: GLSLVersion.GLES_100,\n        versionPragma: false,\n        type: \"vs\",\n    });\n    const targetFS = targetGLSL({\n        version: GLSLVersion.GLES_100,\n        versionPragma: false,\n        type: \"fs\",\n        prelude: \"precision highp float;\",\n    });\n    let vertexAst;\n    let positionBuffer;\n    /**\n     * Determine which vertex shader to use\n     * for determining read uv from geometry.\n     */\n    if (geomType === \"quad\") {\n        vertexAst = gpgpuQuadVertexShader(targetVS);\n        // prettier-ignore\n        positionBuffer = new Float32Array([-0.5, 0.5, 0, 0.5, 0.5, 0, -0.5, -0.5, 0, 0.5, -0.5, 0]);\n    }\n    else {\n        vertexAst = gpgpuTriangleVertexShader(targetVS);\n        positionBuffer = new Float32Array([-1, -1, 0, -1, 4, 0, 4, -1, 0]);\n    }\n    const fragmentAst = updateProgram(targetFS);\n    const vertexSource = targetVS(vertexAst);\n    const fragmentSource = targetFS(fragmentAst);\n    // An additional source for raw state writes.\n    const fragmentWriteSource = targetFS(gpgpuWriteOperation(targetFS));\n    return {\n        geomType,\n        count,\n        vertexAst,\n        fragmentAst,\n        vertexSource,\n        fragmentSource,\n        fragmentWriteSource,\n        positionBuffer,\n        width,\n        height,\n    };\n};\n","import { program, defMain, uniform, assign, mul, vec4, input, sym, vec2, div, $x, mod, $y, texture, $xyz, $w, sub, add, floor, float, output, step, } from \"@thi.ng/shader-ast\";\n/**\n *\n * Shader for rendering particles as lines\n * based on the velocity of the particle.\n *\n * Velocity is calculated from the difference between\n * two position states.\n *\n * @param target\n */\nexport const linesVertexShader = (target) => {\n    const projectionMatrix = uniform(\"mat4\", \"projectionMatrix\");\n    const modelViewMatrix = uniform(\"mat4\", \"modelViewMatrix\");\n    const resolution = uniform(\"vec2\", \"resolution\");\n    const state_1 = uniform(\"sampler2D\", \"state_1\");\n    const state_2 = uniform(\"sampler2D\", \"state_2\");\n    // Attributes\n    const position = input(\"vec3\", \"position\");\n    const color = input(\"vec3\", \"color\");\n    const vColor = output(\"vec3\", \"vColor\");\n    // Offsets span from 0 to count * 2.\n    // From this, the line segment start and end is determined by offset % 2\n    // And the offset for reading from the texture is offset / 2\n    const offset = input(\"float\", \"offset\");\n    const offset2 = floor(div(offset, 2.0));\n    // Read Values\n    const uv = sym(div(vec2(div(offset2, $x(resolution)), mod(offset2, $y(resolution))), resolution));\n    const readState1 = sym(texture(state_1, uv));\n    const readState2 = sym(texture(state_2, uv));\n    const stateDiff = sym(sub(readState2, readState1));\n    // Line/Velocity length\n    // Ensure age2 < age1 always. Otherwise lines\n    // flicker when resetting age between states.\n    const age1 = $w(readState1);\n    const age2 = $w(readState2);\n    const velCap = step(float(0), sub(age1, age2)); // cap velocity\n    const lineLen = mul(float(5.0), velCap); // multiply by line length, unless age2 > age 1\n    const vel = mul($xyz(stateDiff), lineLen); // apply\n    const pos = $xyz(readState1);\n    const modOffset = mod(offset, float(2.0));\n    const pos1 = add(pos, mul(vel, modOffset)); // mod the offset and add the velocity on alternating indices.\n    return program([\n        // Uniforms\n        projectionMatrix,\n        modelViewMatrix,\n        state_1,\n        state_2,\n        resolution,\n        // Attributes\n        position,\n        offset,\n        color,\n        vColor,\n        // Main\n        defMain(() => [\n            uv,\n            readState1,\n            readState2,\n            stateDiff,\n            assign(vColor, color),\n            // assign(vColor, vec3(0.7)),\n            assign(target.gl_Position, mul(projectionMatrix, mul(modelViewMatrix, vec4(pos1, 1.0)))),\n        ]),\n    ]);\n};\nexport const linesFragmentShader = (target) => {\n    let vColor;\n    return program([\n        (vColor = input(\"vec3\", \"vColor\", { prec: \"highp\" })),\n        defMain(() => [assign(target.gl_FragColor, vec4(vColor, 1.0))]),\n    ]);\n};\nexport const particleLinesProgram = () => {\n    return {\n        vertexShader: linesVertexShader,\n        fragmentShader: linesFragmentShader,\n    };\n};\n","import { program, defMain, uniform, assign, mul, vec4, input, sym, vec2, div, $x, mod, $y, texture, $xyz, $w, output, } from \"@thi.ng/shader-ast\";\nexport const pointsVertexShader = (target) => {\n    const projectionMatrix = uniform(\"mat4\", \"projectionMatrix\");\n    const modelViewMatrix = uniform(\"mat4\", \"modelViewMatrix\");\n    const resolution = uniform(\"vec2\", \"resolution\");\n    const state_1 = uniform(\"sampler2D\", \"state_1\");\n    const point_size = uniform(\"float\", \"point_size\");\n    // Attributes\n    const position = input(\"vec3\", \"position\");\n    const offset = input(\"float\", \"offset\");\n    const color = input(\"vec3\", \"color\");\n    // Varyings\n    const vColor = output(\"vec3\", \"vColor\");\n    // Read Values\n    const uv = sym(div(vec2(div(offset, $x(resolution)), mod(offset, $y(resolution))), resolution));\n    const readState = sym(texture(state_1, uv));\n    const pos = $xyz(readState);\n    const age = $w(readState);\n    return program([\n        // Uniforms\n        projectionMatrix,\n        modelViewMatrix,\n        state_1,\n        point_size,\n        resolution,\n        // Attributes\n        position,\n        offset,\n        color,\n        vColor,\n        // Main\n        defMain(() => [\n            uv,\n            readState,\n            assign(target.gl_PointSize, point_size),\n            assign(vColor, color),\n            assign(target.gl_Position, mul(projectionMatrix, mul(modelViewMatrix, vec4(pos, 1.0)))),\n        ]),\n    ]);\n};\nexport const pointsFragmentShader = (target) => {\n    const vColor = input(\"vec3\", \"vColor\", { prec: \"highp\" });\n    return program([\n        vColor,\n        defMain(() => [assign(target.gl_FragColor, vec4(vColor, 1.0))]),\n    ]);\n};\nexport const particlePointsProgram = () => {\n    return {\n        vertexShader: pointsVertexShader,\n        fragmentShader: pointsFragmentShader,\n    };\n};\n","import { targetGLSL, GLSLVersion } from \"@thi.ng/shader-ast-glsl\";\nexport const compileProgramAst = (programAst) => {\n    const compileVS = targetGLSL({\n        version: GLSLVersion.GLES_100,\n        type: \"vs\",\n    });\n    const compileFS = targetGLSL({\n        version: GLSLVersion.GLES_100,\n        type: \"fs\",\n    });\n    const vertexSource = compileVS(programAst.vertexShader(compileVS));\n    const fragmentSource = compileFS(programAst.fragmentShader(compileFS));\n    return {\n        vertexSource,\n        fragmentSource,\n    };\n};\n"],"names":[],"mappings":";;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,qBAAqB,GAAG,CAAC,MAAM,KAAK;AACjD,IAAI,MAAM,eAAe,GAAG,OAAO,CAAC,MAAM,EAAE,iBAAiB,EAAE,EAAE,CAAC,CAAC;AACnE,IAAI,MAAM,gBAAgB,GAAG,OAAO,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC;AACjE,IAAI,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;AAC/C,IAAI,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AAC9C,IAAI,OAAO,OAAO,CAAC;AACnB,QAAQ,eAAe;AACvB,QAAQ,gBAAgB;AACxB,QAAQ,QAAQ;AAChB,QAAQ,OAAO;AACf,QAAQ,OAAO,CAAC,MAAM;AACtB,YAAY,MAAM,CAAC,OAAO,EAAE,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC;AACpD,YAAY,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,GAAG,CAAC,gBAAgB,EAAE,GAAG,CAAC,eAAe,EAAE,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AACxG,SAAS,CAAC;AACV,KAAK,CAAC,CAAC;AACP,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,yBAAyB,GAAG,CAAC,MAAM,KAAK;AACrD,IAAI,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;AAC/C,IAAI,MAAM,OAAO,GAAG,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AAC9C,IAAI,OAAO,OAAO,CAAC;AACnB,QAAQ,QAAQ;AAChB,QAAQ,OAAO;AACf,QAAQ,OAAO,CAAC,MAAM;AACtB,YAAY,MAAM,CAAC,OAAO,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;AAC9D,YAAY,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;AAC3D,SAAS,CAAC;AACV,KAAK,CAAC,CAAC;AACP,EAAE;AACF;AACA;AACA;AACA;AACA;AACY,MAAC,iBAAiB,GAAG,CAAC,MAAM,KAAK;AAC7C,IAAI,MAAM,QAAQ,GAAG,OAAO,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;AACtD,IAAI,MAAM,OAAO,GAAG,OAAO,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;AACpD,IAAI,MAAM,OAAO,GAAG,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AAC7C,IAAI,OAAO,OAAO,CAAC,CAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;AACpE,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,mBAAmB,GAAG,CAAC,MAAM,KAAK;AAC/C,IAAI,MAAM,SAAS,GAAG,OAAO,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;AAC1D,IAAI,MAAM,OAAO,GAAG,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AAC7C,IAAI,MAAM,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;AACrD,IAAI,OAAO,OAAO,CAAC;AACnB,QAAQ,SAAS;AACjB,QAAQ,OAAO;AACf,QAAQ,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,CAAC;AACtE,KAAK,CAAC,CAAC;AACP;;ACrEY,MAAC,UAAU,GAAG,CAAC,IAAI,KAAK;AACpC,IAAI,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,aAAa,EAAE,GAAG,IAAI,CAAC;AACnE,IAAI,MAAM,QAAQ,GAAG,UAAU,CAAC;AAChC,QAAQ,OAAO,EAAE,WAAW,CAAC,QAAQ;AACrC,QAAQ,aAAa,EAAE,KAAK;AAC5B,QAAQ,IAAI,EAAE,IAAI;AAClB,KAAK,CAAC,CAAC;AACP,IAAI,MAAM,QAAQ,GAAG,UAAU,CAAC;AAChC,QAAQ,OAAO,EAAE,WAAW,CAAC,QAAQ;AACrC,QAAQ,aAAa,EAAE,KAAK;AAC5B,QAAQ,IAAI,EAAE,IAAI;AAClB,QAAQ,OAAO,EAAE,wBAAwB;AACzC,KAAK,CAAC,CAAC;AACP,IAAI,IAAI,SAAS,CAAC;AAClB,IAAI,IAAI,cAAc,CAAC;AACvB;AACA;AACA;AACA;AACA,IAAI,IAAI,QAAQ,KAAK,MAAM,EAAE;AAC7B,QAAQ,SAAS,GAAG,qBAAqB,CAAC,QAAQ,CAAC,CAAC;AACpD;AACA,QAAQ,cAAc,GAAG,IAAI,YAAY,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC;AACpG,KAAK;AACL,SAAS;AACT,QAAQ,SAAS,GAAG,yBAAyB,CAAC,QAAQ,CAAC,CAAC;AACxD,QAAQ,cAAc,GAAG,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC3E,KAAK;AACL,IAAI,MAAM,WAAW,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC;AAChD,IAAI,MAAM,YAAY,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC;AAC7C,IAAI,MAAM,cAAc,GAAG,QAAQ,CAAC,WAAW,CAAC,CAAC;AACjD;AACA,IAAI,MAAM,mBAAmB,GAAG,QAAQ,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC,CAAC;AACxE,IAAI,OAAO;AACX,QAAQ,QAAQ;AAChB,QAAQ,KAAK;AACb,QAAQ,SAAS;AACjB,QAAQ,WAAW;AACnB,QAAQ,YAAY;AACpB,QAAQ,cAAc;AACtB,QAAQ,mBAAmB;AAC3B,QAAQ,cAAc;AACtB,QAAQ,KAAK;AACb,QAAQ,MAAM;AACd,KAAK,CAAC;AACN;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,iBAAiB,GAAG,CAAC,MAAM,KAAK;AAC7C,IAAI,MAAM,gBAAgB,GAAG,OAAO,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC;AACjE,IAAI,MAAM,eAAe,GAAG,OAAO,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC;AAC/D,IAAI,MAAM,UAAU,GAAG,OAAO,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;AACrD,IAAI,MAAM,OAAO,GAAG,OAAO,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;AACpD,IAAI,MAAM,OAAO,GAAG,OAAO,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;AACpD;AACA,IAAI,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;AAC/C,IAAI,MAAM,KAAK,GAAG,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AACzC,IAAI,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AAC5C;AACA;AACA;AACA,IAAI,MAAM,MAAM,GAAG,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;AAC5C,IAAI,MAAM,OAAO,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;AAC5C;AACA,IAAI,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,CAAC,EAAE,GAAG,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC;AACtG,IAAI,MAAM,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;AACjD,IAAI,MAAM,UAAU,GAAG,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;AACjD,IAAI,MAAM,SAAS,GAAG,GAAG,CAAC,GAAG,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC;AACvD;AACA;AACA;AACA,IAAI,MAAM,IAAI,GAAG,EAAE,CAAC,UAAU,CAAC,CAAC;AAChC,IAAI,MAAM,IAAI,GAAG,EAAE,CAAC,UAAU,CAAC,CAAC;AAChC,IAAI,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;AACnD,IAAI,MAAM,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC;AAC5C,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,CAAC,CAAC;AAC9C,IAAI,MAAM,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;AACjC,IAAI,MAAM,SAAS,GAAG,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;AAC9C,IAAI,MAAM,IAAI,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC,CAAC;AAC/C,IAAI,OAAO,OAAO,CAAC;AACnB;AACA,QAAQ,gBAAgB;AACxB,QAAQ,eAAe;AACvB,QAAQ,OAAO;AACf,QAAQ,OAAO;AACf,QAAQ,UAAU;AAClB;AACA,QAAQ,QAAQ;AAChB,QAAQ,MAAM;AACd,QAAQ,KAAK;AACb,QAAQ,MAAM;AACd;AACA,QAAQ,OAAO,CAAC,MAAM;AACtB,YAAY,EAAE;AACd,YAAY,UAAU;AACtB,YAAY,UAAU;AACtB,YAAY,SAAS;AACrB,YAAY,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC;AACjC;AACA,YAAY,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,GAAG,CAAC,gBAAgB,EAAE,GAAG,CAAC,eAAe,EAAE,IAAI,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AACpG,SAAS,CAAC;AACV,KAAK,CAAC,CAAC;AACP,EAAE;AACU,MAAC,mBAAmB,GAAG,CAAC,MAAM,KAAK;AAC/C,IAAI,IAAI,MAAM,CAAC;AACf,IAAI,OAAO,OAAO,CAAC;AACnB,SAAS,MAAM,GAAG,KAAK,CAAC,MAAM,EAAE,QAAQ,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;AAC5D,QAAQ,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AACvE,KAAK,CAAC,CAAC;AACP,EAAE;AACU,MAAC,oBAAoB,GAAG,MAAM;AAC1C,IAAI,OAAO;AACX,QAAQ,YAAY,EAAE,iBAAiB;AACvC,QAAQ,cAAc,EAAE,mBAAmB;AAC3C,KAAK,CAAC;AACN;;AC7EY,MAAC,kBAAkB,GAAG,CAAC,MAAM,KAAK;AAC9C,IAAI,MAAM,gBAAgB,GAAG,OAAO,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC;AACjE,IAAI,MAAM,eAAe,GAAG,OAAO,CAAC,MAAM,EAAE,iBAAiB,CAAC,CAAC;AAC/D,IAAI,MAAM,UAAU,GAAG,OAAO,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;AACrD,IAAI,MAAM,OAAO,GAAG,OAAO,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;AACpD,IAAI,MAAM,UAAU,GAAG,OAAO,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;AACtD;AACA,IAAI,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;AAC/C,IAAI,MAAM,MAAM,GAAG,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;AAC5C,IAAI,MAAM,KAAK,GAAG,KAAK,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;AACzC;AACA,IAAI,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AAC5C;AACA,IAAI,MAAM,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE,CAAC,UAAU,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,EAAE,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC;AACpG,IAAI,MAAM,SAAS,GAAG,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;AAChD,IAAI,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC;AAChC,IAAgB,EAAE,CAAC,SAAS,EAAE;AAC9B,IAAI,OAAO,OAAO,CAAC;AACnB;AACA,QAAQ,gBAAgB;AACxB,QAAQ,eAAe;AACvB,QAAQ,OAAO;AACf,QAAQ,UAAU;AAClB,QAAQ,UAAU;AAClB;AACA,QAAQ,QAAQ;AAChB,QAAQ,MAAM;AACd,QAAQ,KAAK;AACb,QAAQ,MAAM;AACd;AACA,QAAQ,OAAO,CAAC,MAAM;AACtB,YAAY,EAAE;AACd,YAAY,SAAS;AACrB,YAAY,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE,UAAU,CAAC;AACnD,YAAY,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC;AACjC,YAAY,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,GAAG,CAAC,gBAAgB,EAAE,GAAG,CAAC,eAAe,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AACnG,SAAS,CAAC;AACV,KAAK,CAAC,CAAC;AACP,EAAE;AACU,MAAC,oBAAoB,GAAG,CAAC,MAAM,KAAK;AAChD,IAAI,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,EAAE,QAAQ,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;AAC9D,IAAI,OAAO,OAAO,CAAC;AACnB,QAAQ,MAAM;AACd,QAAQ,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AACvE,KAAK,CAAC,CAAC;AACP,EAAE;AACU,MAAC,qBAAqB,GAAG,MAAM;AAC3C,IAAI,OAAO;AACX,QAAQ,YAAY,EAAE,kBAAkB;AACxC,QAAQ,cAAc,EAAE,oBAAoB;AAC5C,KAAK,CAAC;AACN;;ACnDY,MAAC,iBAAiB,GAAG,CAAC,UAAU,KAAK;AACjD,IAAI,MAAM,SAAS,GAAG,UAAU,CAAC;AACjC,QAAQ,OAAO,EAAE,WAAW,CAAC,QAAQ;AACrC,QAAQ,IAAI,EAAE,IAAI;AAClB,KAAK,CAAC,CAAC;AACP,IAAI,MAAM,SAAS,GAAG,UAAU,CAAC;AACjC,QAAQ,OAAO,EAAE,WAAW,CAAC,QAAQ;AACrC,QAAQ,IAAI,EAAE,IAAI;AAClB,KAAK,CAAC,CAAC;AACP,IAAI,MAAM,YAAY,GAAG,SAAS,CAAC,UAAU,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC;AACvE,IAAI,MAAM,cAAc,GAAG,SAAS,CAAC,UAAU,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC;AAC3E,IAAI,OAAO;AACX,QAAQ,YAAY;AACpB,QAAQ,cAAc;AACtB,KAAK,CAAC;AACN;;;;"}