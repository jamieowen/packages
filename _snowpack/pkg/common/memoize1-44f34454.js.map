{"version":3,"file":"memoize1-44f34454.js","sources":["../../../../../node_modules/@thi.ng/memoize/memoize1.js"],"sourcesContent":["/**\n * Optimized memoization for single arg functions. If the function\n * expects args other than strings or numbers, you MUST provide a `Map`\n * implementation which supports value (rather than object) equality,\n * e.g. one of those provided by\n * {@link @thi.ng/associative# | @thi.ng/associative}. Using a native\n * `Map` type here will lead to memory leaks! Alternatively, use\n * {@link (memoizeJ:1)}.\n *\n * @param fn -\n * @param cache -\n */\nexport const memoize1 = (fn, cache) => {\n    !cache && (cache = new Map());\n    return (x) => {\n        let res;\n        return cache.has(x)\n            ? cache.get(x)\n            : (cache.set(x, (res = fn(x))), res);\n    };\n};\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,QAAQ,GAAG,CAAC,EAAE,EAAE,KAAK,KAAK;AACvC,IAAI,CAAC,KAAK,KAAK,KAAK,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC;AAClC,IAAI,OAAO,CAAC,CAAC,KAAK;AAClB,QAAQ,IAAI,GAAG,CAAC;AAChB,QAAQ,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;AAC3B,cAAc,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;AAC1B,eAAe,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;AACjD,KAAK,CAAC;AACN;;;;"}