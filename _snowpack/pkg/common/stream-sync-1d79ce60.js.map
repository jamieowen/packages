{"version":3,"file":"stream-sync-1d79ce60.js","sources":["../../../../../node_modules/@thi.ng/compose/identity.js","../../../../../node_modules/@thi.ng/transducers/xform/labeled.js","../../../../../node_modules/@thi.ng/transducers/xform/map-vals.js","../../../../../node_modules/@thi.ng/transducers/xform/partition-sync.js","../../../../../node_modules/@thi.ng/rstream/stream-sync.js"],"sourcesContent":["export const identity = (x) => x;\n","import { isFunction, isIterable } from \"@thi.ng/checks\";\nimport { iterator1 } from \"../iterator\";\nimport { map } from \"./map\";\nexport function labeled(id, src) {\n    return isIterable(src)\n        ? iterator1(labeled(id), src)\n        : map(isFunction(id) ? (x) => [id(x), x] : (x) => [id, x]);\n}\n","import { $iter } from \"../iterator\";\nimport { map } from \"./map\";\nexport function mapVals(...args) {\n    const iter = $iter(mapVals, args);\n    if (iter) {\n        return iter;\n    }\n    const fn = args[0];\n    const copy = args[1] !== false;\n    return map((x) => {\n        const res = copy ? {} : x;\n        for (let k in x) {\n            res[k] = fn(x[k]);\n        }\n        return res;\n    });\n}\n","import { isArray } from \"@thi.ng/checks\";\nimport { identity } from \"@thi.ng/compose\";\nimport { illegalState } from \"@thi.ng/errors\";\nimport { $iter, iterator } from \"../iterator\";\nimport { isReduced } from \"../reduced\";\nexport function partitionSync(...args) {\n    const iter = $iter(partitionSync, args, iterator);\n    if (iter)\n        return iter;\n    const { key, mergeOnly, reset, all, backPressure } = Object.assign({ key: identity, mergeOnly: false, reset: true, all: true, backPressure: 0 }, args[1]);\n    const requiredKeys = isArray(args[0])\n        ? new Set(args[0])\n        : args[0];\n    const currKeys = new Set();\n    const cache = new Map();\n    let curr = {};\n    const xform = ([init, complete, reduce]) => {\n        let first = true;\n        if (mergeOnly || backPressure < 1) {\n            return [\n                init,\n                (acc) => {\n                    if ((reset && all && currKeys.size > 0) ||\n                        (!reset && first)) {\n                        acc = reduce(acc, curr);\n                        curr = {};\n                        currKeys.clear();\n                        first = false;\n                    }\n                    return complete(acc);\n                },\n                (acc, x) => {\n                    const k = key(x);\n                    if (requiredKeys.has(k)) {\n                        curr[k] = x;\n                        currKeys.add(k);\n                        if (mergeOnly ||\n                            requiredInputs(requiredKeys, currKeys)) {\n                            acc = reduce(acc, curr);\n                            first = false;\n                            if (reset) {\n                                curr = {};\n                                currKeys.clear();\n                            }\n                            else {\n                                curr = Object.assign({}, curr);\n                            }\n                        }\n                    }\n                    return acc;\n                },\n            ];\n        }\n        else {\n            // with backpressure / caching...\n            return [\n                init,\n                (acc) => {\n                    if (all && currKeys.size > 0) {\n                        acc = reduce(acc, collect(cache, currKeys));\n                        cache.clear();\n                        currKeys.clear();\n                    }\n                    return complete(acc);\n                },\n                (acc, x) => {\n                    const k = key(x);\n                    if (requiredKeys.has(k)) {\n                        let slot = cache.get(k);\n                        !slot && cache.set(k, (slot = []));\n                        slot.length >= backPressure &&\n                            illegalState(`max back pressure (${backPressure}) exceeded for input: ${String(k)}`);\n                        slot.push(x);\n                        currKeys.add(k);\n                        while (requiredInputs(requiredKeys, currKeys)) {\n                            acc = reduce(acc, collect(cache, currKeys));\n                            first = false;\n                            if (isReduced(acc))\n                                break;\n                        }\n                    }\n                    return acc;\n                },\n            ];\n        }\n    };\n    xform.keys = () => requiredKeys;\n    xform.clear = () => {\n        cache.clear();\n        requiredKeys.clear();\n        currKeys.clear();\n        curr = {};\n    };\n    xform.add = (id) => {\n        requiredKeys.add(id);\n    };\n    xform.delete = (id, clean = true) => {\n        cache.delete(id);\n        requiredKeys.delete(id);\n        if (clean) {\n            currKeys.delete(id);\n            delete curr[id];\n        }\n    };\n    return xform;\n}\nconst requiredInputs = (required, curr) => {\n    if (curr.size < required.size)\n        return false;\n    for (let id of required) {\n        if (!curr.has(id))\n            return false;\n    }\n    return true;\n};\nconst collect = (cache, currKeys) => {\n    const curr = {};\n    for (let id of currKeys) {\n        const slot = cache.get(id);\n        curr[id] = slot.shift();\n        !slot.length && currKeys.delete(id);\n    }\n    return curr;\n};\n","import { comp, labeled, mapVals, partitionSync, } from \"@thi.ng/transducers\";\nimport { LOGGER, State } from \"./api\";\nimport { Subscription } from \"./subscription\";\nimport { isFirstOrLastInput } from \"./utils/checks\";\nimport { optsWithID } from \"./utils/idgen\";\n/**\n * Similar to {@link StreamMerge}, but with extra synchronization of inputs.\n * Before emitting any new values, {@link StreamSync} collects values until at\n * least one has been received from *all* inputs. Once that's the case, the\n * collected values are sent as labeled tuple object to downstream subscribers.\n *\n * @remarks\n * Each value in the emitted tuple objects is stored under their input stream's\n * ID. Only the last value received from each input is passed on. After the\n * initial tuple has been emitted, you can choose from two possible behaviors:\n *\n * 1) Any future change in any input will produce a new result tuple. These\n *    tuples will retain the most recently read values from other inputs. This\n *    behavior is the default and illustrated in the above schematic.\n * 2) If the `reset` option is `true`, every input will have to provide at least\n *    one new value again until another result tuple is produced.\n *\n * Any done inputs are automatically removed. By default, `StreamSync` calls\n * {@link ISubscriber.done} when the last active input is done, but this\n * behavior can be overridden via the provided options.\n *\n * Input streams can be added and removed dynamically and the emitted tuple size\n * adjusts to the current number of inputs (the next time a value is received\n * from any input). After an input is removed (or done) its last received value\n * can also be removed from the result tuple. This behavior can be configured\n * via the `clean` option given to `sync()` (disabled by default).\n *\n * If the `reset` option is enabled, the last emitted tuple is allowed to be\n * incomplete, by default. To only allow complete tuples, also set the `all`\n * option to `false`.\n *\n * The synchronization is done via the\n * {@link @thi.ng/transducers#(partitionSync:1)} transducer from the\n * {@link @thi.ng/transducers# | @thi.ng/transducers} package. See this\n * function's docs for further details.\n *\n * @example\n * ```ts\n * const a = stream();\n * const b = stream();\n * s = sync({ src: { a, b } }).subscribe(trace(\"result: \"));\n * a.next(1);\n * b.next(2);\n * // result: { a: 1, b: 2 }\n * ```\n *\n * Also see: {@link StreamSyncOpts}\n *\n * @param opts -\n */\nexport const sync = (opts) => new StreamSync(opts);\nexport class StreamSync extends Subscription {\n    constructor(opts) {\n        const psync = partitionSync(new Set(), {\n            key: (x) => x[0],\n            mergeOnly: opts.mergeOnly === true,\n            reset: opts.reset === true,\n            all: opts.all !== false,\n            backPressure: opts.backPressure || 0,\n        });\n        const mapv = mapVals((x) => x[1]);\n        super(undefined, optsWithID(\"streamsync\", Object.assign(Object.assign({}, opts), { xform: opts.xform\n                ? comp(psync, mapv, opts.xform)\n                : comp(psync, mapv) })));\n        this.sources = new Map();\n        this.realSourceIDs = new Map();\n        this.invRealSourceIDs = new Map();\n        this.idSources = new Map();\n        this.psync = psync;\n        this.clean = !!opts.clean;\n        opts.src && this.addAll(opts.src);\n    }\n    add(src, id) {\n        id || (id = src.id);\n        this.ensureState();\n        this.psync.add(id);\n        this.realSourceIDs.set(id, src.id);\n        this.invRealSourceIDs.set(src.id, id);\n        this.idSources.set(src.id, src);\n        this.sources.set(src, src.subscribe({\n            next: (x) => \n            // if received value is sub, add it as source\n            x[1] instanceof Subscription\n                ? this.add(x[1])\n                : this.next(x),\n            done: () => this.markDone(src),\n            __owner: this,\n        }, labeled(id), { id: `in-${id}` }));\n    }\n    addAll(src) {\n        // pre-add all source ids for partitionSync\n        for (let id in src) {\n            this.psync.add(id);\n        }\n        for (let id in src) {\n            this.add(src[id], id);\n        }\n    }\n    remove(src) {\n        const sub = this.sources.get(src);\n        if (sub) {\n            const id = this.invRealSourceIDs.get(src.id);\n            LOGGER.info(`removing src: ${src.id} (${id})`);\n            this.psync.delete(id, this.clean);\n            this.realSourceIDs.delete(id);\n            this.invRealSourceIDs.delete(src.id);\n            this.idSources.delete(src.id);\n            this.sources.delete(src);\n            sub.unsubscribe();\n            return true;\n        }\n        return false;\n    }\n    removeID(id) {\n        const src = this.getSourceForID(id);\n        return src ? this.remove(src) : false;\n    }\n    removeAll(src) {\n        // pre-remove all source ids for partitionSync\n        for (let s of src) {\n            this.psync.delete(this.invRealSourceIDs.get(s.id));\n        }\n        let ok = true;\n        for (let s of src) {\n            ok = this.remove(s) && ok;\n        }\n        return ok;\n    }\n    removeAllIDs(ids) {\n        let ok = true;\n        for (let id of ids) {\n            ok = this.removeID(id) && ok;\n        }\n        return ok;\n    }\n    getSourceForID(id) {\n        return this.idSources.get(this.realSourceIDs.get(id));\n    }\n    getSources() {\n        const res = {};\n        for (let [id, src] of this.idSources) {\n            res[this.invRealSourceIDs.get(id)] = src;\n        }\n        return res;\n    }\n    unsubscribe(sub) {\n        if (!sub) {\n            for (let s of this.sources.values()) {\n                s.unsubscribe();\n            }\n            this.state = State.DONE;\n            this.sources.clear();\n            this.psync.clear();\n            this.realSourceIDs.clear();\n            this.invRealSourceIDs.clear();\n            this.idSources.clear();\n        }\n        return super.unsubscribe(sub);\n    }\n    markDone(src) {\n        this.remove(src);\n        isFirstOrLastInput(this.closeIn, this.sources.size) && this.done();\n    }\n}\n"],"names":[],"mappings":"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"}