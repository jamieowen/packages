{"version":3,"file":"color.js","sources":["../../../../../node_modules/@thi.ng/math/prec.js","../../../../../node_modules/@thi.ng/hex/index.js","../../../../../node_modules/@thi.ng/binary/splat.js","../../../../../node_modules/@thi.ng/binary/swizzle.js","../../../../../node_modules/@thi.ng/vectors/setc.js","../../../../../node_modules/@thi.ng/vectors/dot.js","../../../../../node_modules/@thi.ng/vectors/dots.js","../../../../../node_modules/@thi.ng/memoize/memoizej.js","../../../../../node_modules/@thi.ng/color/api.js","../../../../../node_modules/@thi.ng/strings/repeat.js","../../../../../node_modules/@thi.ng/strings/radix.js","../../../../../node_modules/@thi.ng/strings/pad-left.js","../../../../../node_modules/@thi.ng/strings/float.js","../../../../../node_modules/@thi.ng/strings/percent.js","../../../../../node_modules/@thi.ng/color/api/constants.js","../../../../../node_modules/@thi.ng/color/api/names.js","../../../../../node_modules/@thi.ng/color/api/system.js","../../../../../node_modules/@thi.ng/color/convert.js","../../../../../node_modules/@thi.ng/color/int/int-srgb.js","../../../../../node_modules/@thi.ng/color/css/parse-css.js","../../../../../node_modules/@thi.ng/color/internal/ensure-alpha.js","../../../../../node_modules/@thi.ng/color/ops/linear.js","../../../../../node_modules/@thi.ng/color/rgb/hue-rgb.js","../../../../../node_modules/@thi.ng/color/ops/luminance-rgb.js","../../../../../node_modules/@thi.ng/color/ops/clamp.js","../../../../../node_modules/@thi.ng/color/rgb/rgb-hcv.js","../../../../../node_modules/@thi.ng/color/hsv/hsv-hsl.js","../../../../../node_modules/@thi.ng/color/rgb/rgb-hsl.js","../../../../../node_modules/@thi.ng/color/rgb/rgb-hsv.js","../../../../../node_modules/@thi.ng/color/hsl/hsl-rgb.js","../../../../../node_modules/@thi.ng/color/hsv/hsv-rgb.js","../../../../../node_modules/@thi.ng/color/rgb/rgb-srgb.js","../../../../../node_modules/@thi.ng/color/internal/matrix-ops.js","../../../../../node_modules/@thi.ng/color/lab/lab-xyz.js","../../../../../node_modules/@thi.ng/color/lab/lab-lch.js","../../../../../node_modules/@thi.ng/color/xyz/xyz-rgb.js","../../../../../node_modules/@thi.ng/color/lab/lab-rgb.js","../../../../../node_modules/@thi.ng/color/hsl/hsl-css.js","../../../../../node_modules/@thi.ng/color/hsv/hsv-css.js","../../../../../node_modules/@thi.ng/color/int/int-css.js","../../../../../node_modules/@thi.ng/color/int/int-int.js","../../../../../node_modules/@thi.ng/color/srgb/srgb-css.js","../../../../../node_modules/@thi.ng/color/rgb/rgb-css.js","../../../../../node_modules/@thi.ng/color/css/css.js"],"sourcesContent":["import { EPS } from \"./api\";\n/**\n * Returns `a - b * floor(a/b)`\n *\n * @param a -\n * @param b -\n */\nexport const fmod = (a, b) => a - b * Math.floor(a / b);\nexport const fract = (x) => x - Math.floor(x);\nexport const trunc = (x) => (x < 0 ? Math.ceil(x) : Math.floor(x));\nexport const roundTo = (x, prec = 1) => Math.round(x / prec) * prec;\nexport const floorTo = (x, prec = 1) => Math.floor(x / prec) * prec;\nexport const ceilTo = (x, prec = 1) => Math.ceil(x / prec) * prec;\n/**\n * Only rounds `x` to nearest int if `fract(x)` <= `eps` or >= `1-eps`.\n *\n * @param x -\n * @param eps -\n */\nexport const roundEps = (x, eps = EPS) => {\n    const f = fract(x);\n    return f <= eps || f >= 1 - eps ? Math.round(x) : x;\n};\n","const P32 = 0x100000000;\n/**\n * Hex digits\n */\nexport const HEX = \"0123456789abcdef\";\n/**\n * Returns 4bit uint as hex string\n *\n * @param x\n */\nexport const U4 = (x) => HEX[x & 0xf];\n/**\n * Returns 8bit uint as hex string\n *\n * @param x\n */\nexport const U8 = (x) => HEX[(x >>> 4) & 0xf] + HEX[x & 0xf];\n/**\n * Returns hex string of 8bit uint, read from given byte array at index `i`.\n *\n * @param x -\n * @param i -\n */\nexport const U8A = (x, i) => U8(x[i]);\n/**\n * Returns 16bit uint as hex string\n *\n * @param x\n */\nexport const U16 = (x) => U8(x >>> 8) + U8(x & 0xff);\n/**\n * Returns hex string of 16bit uint, read in big-endian order from given byte\n * array at index `i`.\n *\n * @param x -\n * @param i -\n */\nexport const U16BE = (x, i) => U8(x[i]) + U8(x[i + 1]);\n/**\n * Returns hex string of 16bit uint, read in litte-endian order from given byte\n * array at index `i`.\n *\n * @param x -\n * @param i -\n */\nexport const U16LE = (x, i) => U8(x[i + 1]) + U8(x[i]);\n/**\n * Returns 24bit uint as hex string\n *\n * @param x\n */\nexport const U24 = (x) => U8(x >>> 16) + U16(x);\n/**\n * Returns hex string of 24bit uint, read in big-endian order from given byte\n * array at index `i`.\n *\n * @param x -\n * @param i -\n */\nexport const U24BE = (x, i) => U8(x[i]) + U16BE(x, i + 1);\n/**\n * Returns hex string of 24bit uint, read in litte-endian order from given byte\n * array at index `i`.\n *\n * @param x -\n * @param i -\n */\nexport const U24LE = (x, i) => U8(x[i + 2]) + U16LE(x, i);\n/**\n * Returns 32bit uint as hex string\n *\n * @param x\n */\nexport const U32 = (x) => U16(x >>> 16) + U16(x);\n/**\n * Returns hex string of 32bit uint, read in big-endian order from given byte\n * array at index `i`.\n *\n * @param x -\n * @param i -\n */\nexport const U32BE = (x, i) => U16BE(x, i) + U16BE(x, i + 2);\n/**\n * Returns hex string of 32bit uint, read in litte-endian order from given byte\n * array at index `i`.\n *\n * @param x -\n * @param i -\n */\nexport const U32LE = (x, i) => U16LE(x, i + 2) + U16LE(x, i);\n/**\n * Returns 48bit uint as hex string\n *\n * @param x\n */\nexport const U48 = (x) => U48HL(x / P32, x % P32);\n/**\n * Similar to {@link U48}, but takes the 64bit arg as 2x 32bit values.\n *\n * @param hi -\n * @param lo -\n */\nexport const U48HL = (hi, lo) => U16(hi) + U32(lo);\n/**\n * Returns hex string of 48bit uint, read in big-endian order from given byte\n * array at index `i`.\n *\n * @param x -\n * @param i -\n */\nexport const U48BE = (x, i) => U16BE(x, i) + U32BE(x, i + 2);\n/**\n * Returns hex string of 48bit uint, read in litte-endian order from given byte\n * array at index `i`.\n *\n * @param x -\n * @param i -\n */\nexport const U48LE = (x, i) => U16LE(x, i + 4) + U32LE(x, i);\n/**\n * Returns 64bit uint as hex string.\n *\n * @remarks\n * Note: JS numbers are only integer precise up to `2**53 - 1`. Use\n * {@link U64BE} or {@link U64LE} for byte array based values (full 64bit range\n * supported). Alternatively, use `BigInt(x).toString(16)`.\n *\n * @param x\n */\nexport const U64 = (x) => U64HL(x / P32, x % P32);\n/**\n * Similar to {@link U64}, but takes the 64bit arg as 2x 32bit values.\n *\n * @param hi -\n * @param lo -\n */\nexport const U64HL = (hi, lo) => U32(hi) + U32(lo);\n/**\n * Returns hex string of 64bit uint, read in big-endian order from given byte\n * array at index `i`.\n *\n * @param x -\n * @param i -\n */\nexport const U64BE = (x, i) => U32BE(x, i) + U32BE(x, i + 4);\n/**\n * Returns hex string of 64bit uint, read in litte-endian order from given byte\n * array at index `i`.\n *\n * @param x -\n * @param i -\n */\nexport const U64LE = (x, i) => U32LE(x, i + 4) + U32LE(x, i);\n/**\n * Returns UUID formatted string of given byte array from optional start index\n * `i` (default: 0). Array must have min. length 16 (starting from `i`).\n *\n * @param id -\n * @param i -\n */\nexport const uuid = (id, i = 0) => \n// prettier-ignore\n`${U32BE(id, i)}-${U16BE(id, i + 4)}-${U16BE(id, i + 6)}-${U16BE(id, i + 8)}-${U48BE(id, i + 10)}`;\n","/**\n * Repeats lowest nibble of `x` as 24 bit uint.\n *\n * @param x -\n */\nexport const splat4_24 = (x) => (x & 0xf) * 0x111111;\n/**\n * Repeats lowest nibble of `x` as 32 bit uint.\n *\n * @param x -\n */\nexport const splat4_32 = (x) => ((x & 0xf) * 0x11111111) >>> 0;\n/**\n * Repeats lowest byte of `x` as 24 bit uint.\n *\n * @param x -\n */\nexport const splat8_24 = (x) => (x & 0xff) * 0x010101;\n/**\n * Repeats lowest byte of `x` as 32 bit uint.\n *\n * @param x -\n */\nexport const splat8_32 = (x) => ((x & 0xff) * 0x01010101) >>> 0;\n/**\n * Repeats lowest 16bit of `x` as 32 bit uint.\n *\n * @param x -\n */\nexport const splat16_32 = (x) => ((x &= 0xffff), ((x << 16) | x) >>> 0);\n/**\n * Returns true if bits 0-3 are same as bits 4-7.\n *\n * @param x -\n */\nexport const same4 = (x) => ((x >> 4) & 0xf) === (x & 0xf);\n/**\n * Returns true if bits 0-7 are same as bits 8-15.\n *\n * @param x -\n */\nexport const same8 = (x) => ((x >> 8) & 0xff) === (x & 0xff);\n/**\n * Expands 3x4bit value like `0xabc` to 24bits: `0xaabbcc`\n *\n * @param x\n */\nexport const interleave4_12_24 = (x) => ((x & 0xf00) * 0x1100) | ((x & 0xf0) * 0x110) | ((x & 0xf) * 0x11);\n/**\n * Expands 4x4bit value like `0xabcd` to 32bits: `0xaabbccdd`\n *\n * @param x\n */\nexport const interleave4_16_32 = (x) => (((x & 0xf000) * 0x11000) |\n    ((x & 0xf00) * 0x1100) |\n    ((x & 0xf0) * 0x110) |\n    ((x & 0xf) * 0x11)) >>>\n    0;\n","/**\n * Extracts 16-bit lane from given 32bit uint and returns as unsigned\n * half word [0x0000 .. 0xffff].\n *\n * - Lane #0: bits 16-31\n * - Lane #1: bits 0-15\n *\n * @param x -\n * @param lane - lane ID enum\n */\nexport const lane16 = (x, lane) => (x >>> ((1 - lane) << 4)) & 0xffff;\n/**\n * Extracts 8-bit lane from given 32bit uint and returns as unsigned\n * byte [0x00 .. 0xff].\n *\n * - Lane #0: bits 24-31\n * - Lane #1: bits 16-23\n * - Lane #2: bits 8-15\n * - Lane #3: bits 0-7\n *\n * @param x -\n * @param lane - lane ID enum\n */\nexport const lane8 = (x, lane) => (x >>> ((3 - lane) << 3)) & 0xff;\n/**\n * Extracts 4-bit lane from given 32bit uint and returns as unsigned\n * nibble [0x00 .. 0x0f].\n *\n * - Lane #0: bits 28-31\n * - Lane #1: bits 24-27\n * - Lane #2: bits 20-23\n * - Lane #3: bits 16-19\n * - Lane #4: bits 12-15\n * - Lane #5: bits 8-11\n * - Lane #6: bits 4-7\n * - Lane #7: bits 0-3\n *\n * @param x -\n * @param lane - lane ID enum\n */\nexport const lane4 = (x, lane) => (x >>> ((7 - lane) << 2)) & 0xf;\nexport const lane2 = (x, lane) => (x >>> ((15 - lane) << 1)) & 0x3;\nexport const setLane16 = (x, y, lane) => lane ? mux(x, y, 0xffff) : mux(x, y << 16, 0xffff0000);\n/**\n * Sets 8-bit `lane` with value`y` in `x`.\n *\n * {@link lane8}\n *\n * @param x -\n * @param y -\n * @param lane - lane ID enum\n */\nexport const setLane8 = (x, y, lane) => {\n    const l = (3 - lane) << 3;\n    return ((~(0xff << l) & x) | ((y & 0xff) << l)) >>> 0;\n};\n/**\n * Sets 4-bit `lane` with value `y` in `x`.\n *\n * {@link lane4}\n *\n * @param x -\n * @param y -\n * @param lane - lane ID enum\n */\nexport const setLane4 = (x, y, lane) => {\n    const l = (7 - lane) << 2;\n    return ((~(0xf << l) & x) | ((y & 0xf) << l)) >>> 0;\n};\n/**\n * Sets 2-bit `lane` with value `y` in `x`.\n *\n * {@link lane2}\n *\n * @param x -\n * @param y -\n * @param lane - lane ID enum\n */\nexport const setLane2 = (x, y, lane) => {\n    const l = (15 - lane) << 1;\n    return ((~(0x3 << l) & x) | ((y & 0x3) << l)) >>> 0;\n};\n/**\n * Re-orders byte lanes in given order (MSB).\n *\n * @example\n * ```ts\n * swizzle(0x12345678, 3, 2, 1, 0) // 0x78563412\n * swizzle(0x12345678, 1, 0, 3, 2) // 0x34127856\n * swizzle(0x12345678, 2, 2, 0, 0) // 0x56561212\n * ```\n *\n * @param x - value\n * @param a - lane ID enum\n * @param b - lane ID enum\n * @param c - lane ID enum\n * @param d - lane ID enum\n */\nexport const swizzle8 = (x, a, b, c, d) => ((lane8(x, a) << 24) |\n    (lane8(x, b) << 16) |\n    (lane8(x, c) << 8) |\n    lane8(x, d)) >>>\n    0;\n/**\n *\n * @param x - value\n * @param a - lane ID enum\n * @param b - lane ID enum\n * @param c - lane ID enum\n * @param d - lane ID enum\n * @param e - lane ID enum\n * @param f - lane ID enum\n * @param g - lane ID enum\n * @param h - lane ID enum\n */\nexport const swizzle4 = (x, a, b, c, d, e, f, g, h) => ((lane4(x, a) << 28) |\n    (lane4(x, b) << 24) |\n    (lane4(x, c) << 20) |\n    (lane4(x, d) << 16) |\n    (lane4(x, e) << 12) |\n    (lane4(x, f) << 8) |\n    (lane4(x, g) << 4) |\n    lane4(x, h)) >>>\n    0;\n/**\n * Merges bits of `a` and `b`, selecting bits from `b` where `mask` bits\n * are set.\n *\n * @example\n * ```ts\n * mux(0x12345678, 0xaaaa5555, 0xffff0000)\n * // 0xaaaa5678\n *\n * mux(0x12345678, 0xaaaa5555, 0x0000ffff)\n * // 0x12345555\n * ```\n *\n * @param a\n * @param b\n * @param mask\n */\nexport const mux = (a, b, mask) => (~mask & a) | (mask & b);\n/**\n * Same as `swizzle8(x, 3, 2, 1, 0)`, but faster.\n *\n * @param x -\n */\nexport const flip8 = (x) => ((x >>> 24) | ((x >> 8) & 0xff00) | ((x & 0xff00) << 8) | (x << 24)) >>> 0;\n/**\n * Swaps the highest & lowest 16 bits in `x`.\n *\n * @example\n * ```ts\n * flip16(0x12345678)\n * // 0x56781234\n * ```\n *\n * @param x\n */\nexport const flip16 = (x) => mux(x << 16, x >>> 16, 0xffff);\n/**\n * @deprecated renamed to {@link flip8}\n */\nexport const flipBytes = flip8;\n/**\n * Swaps bytes lanes 0 & 2 (i.e. bits 24-31 with bits 8-15)\n *\n * @param x\n */\nexport const swapLane02 = (x) => ((x & 0xff00) << 16) | ((x >>> 16) & 0xff00) | (x & 0x00ff00ff);\n/**\n * Swaps bytes lanes 1 & 3 (i.e. bits 16-23 with bits 0-7)\n *\n * @param x\n */\nexport const swapLane13 = (x) => ((x & 0xff) << 16) | ((x >> 16) & 0xff) | (x & 0xff00ff00);\n","export const setC2 = (out, x, y) => (!out && (out = []), (out[0] = x), (out[1] = y), out);\nexport const setC3 = (out, x, y, z) => (!out && (out = []), (out[0] = x), (out[1] = y), (out[2] = z), out);\nexport const setC4 = (out, x, y, z, w) => (!out && (out = []),\n    (out[0] = x),\n    (out[1] = y),\n    (out[2] = z),\n    (out[3] = w),\n    out);\nexport const setC6 = (out, a, b, c, d, e, f) => (!out && (out = []),\n    (out[0] = a),\n    (out[1] = b),\n    (out[2] = c),\n    (out[3] = d),\n    (out[4] = e),\n    (out[5] = f),\n    out);\nexport const setC = (out, ...xs) => {\n    !out && (out = []);\n    for (let i = 0, n = xs.length; i < n; i++) {\n        out[i] = xs[i];\n    }\n    return out;\n};\n","import { compile, compileG } from \"./internal/codegen\";\nimport { DOT, DOT_G } from \"./internal/templates\";\nimport { vop } from \"./internal/vop\";\nconst $ = (dim) => dot.add(dim, compile(dim, DOT, \"a,b\", undefined, \"\", \"+\", \"return \", \";\"));\nexport const dot = vop();\ndot.default(compileG(DOT_G, \"a,b\", undefined, \"s\", \"let s=0;\"));\nexport const dot2 = $(2);\nexport const dot3 = $(3);\nexport const dot4 = $(4);\n","import { compile, SARGS_V } from \"./internal/codegen\";\nimport { DOT } from \"./internal/templates\";\nconst $ = (dim) => compile(dim, DOT, `o,a,${SARGS_V}`, \"o,a\", \"\", \"+\", \"return \", \";\", true);\nexport const dotS2 = $(2);\nexport const dotS3 = $(3);\nexport const dotS4 = $(4);\n","export function memoizeJ(fn, cache) {\n    !cache && (cache = {});\n    return (...args) => {\n        const key = JSON.stringify(args);\n        if (key !== undefined) {\n            return key in cache\n                ? cache[key]\n                : (cache[key] = fn.apply(null, args));\n        }\n        return fn.apply(null, args);\n    };\n}\n","/**\n * Hue names in radial order, e.g. used by {@link namedHueRgb}.\n */\nexport var Hue;\n(function (Hue) {\n    Hue[Hue[\"RED\"] = 0] = \"RED\";\n    Hue[Hue[\"ORANGE\"] = 1] = \"ORANGE\";\n    Hue[Hue[\"YELLOW\"] = 2] = \"YELLOW\";\n    Hue[Hue[\"CHARTREUSE\"] = 3] = \"CHARTREUSE\";\n    Hue[Hue[\"GREEN\"] = 4] = \"GREEN\";\n    Hue[Hue[\"SPRING_GREEN\"] = 5] = \"SPRING_GREEN\";\n    Hue[Hue[\"CYAN\"] = 6] = \"CYAN\";\n    Hue[Hue[\"AZURE\"] = 7] = \"AZURE\";\n    Hue[Hue[\"BLUE\"] = 8] = \"BLUE\";\n    Hue[Hue[\"VIOLET\"] = 9] = \"VIOLET\";\n    Hue[Hue[\"MAGENTA\"] = 10] = \"MAGENTA\";\n    Hue[Hue[\"ROSE\"] = 11] = \"ROSE\";\n})(Hue || (Hue = {}));\n/**\n * Result type returned by {@link parseCss}, a simple wrapper for a raw color\n * array and color mode.\n */\nexport class ParsedColor {\n    constructor(mode, value) {\n        this.mode = mode;\n        this.value = value;\n    }\n    deref() {\n        return this.value;\n    }\n}\n","import { memoizeJ } from \"@thi.ng/memoize\";\n/**\n * @param ch - character\n * @param n - repeat count\n */\nexport const repeat = memoizeJ((ch, n) => ch.repeat(n));\n","import { U16 as $16, U24 as $24, U32 as $32, U64HL, U8 as $8, } from \"@thi.ng/hex\";\nimport { memoizeJ } from \"@thi.ng/memoize\";\nimport { repeat } from \"./repeat\";\n/**\n * Returns a {@link Stringer} which formats given numbers to `radix`, `len` and\n * with optional prefix (not included in `len`).\n *\n * @remarks\n * Only bases 2 - 36 are supported, due to native `Number.toString()`\n * limitations.\n *\n * @param radix -\n * @param len -\n * @param prefix -\n */\nexport const radix = memoizeJ((radix, n, prefix = \"\") => {\n    const buf = repeat(\"0\", n);\n    return (x) => {\n        x = (x >>> 0).toString(radix);\n        return prefix + (x.length < n ? buf.substr(x.length) + x : x);\n    };\n});\n/**\n * 8bit binary conversion preset.\n */\nexport const B8 = radix(2, 8);\n/**\n * 16bit binary conversion preset.\n */\nexport const B16 = radix(2, 16);\n/**\n * 32bit binary conversion preset.\n */\nexport const B32 = radix(2, 32);\n/**\n * 8bit hex conversion preset.\n * Assumes unsigned inputs.\n */\nexport const U8 = $8;\n/**\n * 16bit hex conversion preset.\n * Assumes unsigned inputs.\n */\nexport const U16 = $16;\n/**\n * 24bit hex conversion preset.\n * Assumes unsigned inputs.\n */\nexport const U24 = $24;\n/**\n * 32bit hex conversion preset.\n * Assumes unsigned inputs.\n */\nexport const U32 = $32;\n/**\n * 64bit hex conversion preset (2x 32bit ints)\n * Assumes unsigned inputs.\n */\nexport const U64 = U64HL;\n","import { memoizeJ } from \"@thi.ng/memoize\";\nimport { repeat } from \"./repeat\";\n/**\n * @param n - target length\n * @param ch - pad character(s)\n */\nexport const padLeft = memoizeJ((n, ch = \" \") => {\n    const buf = repeat(String(ch), n);\n    return (x, len) => {\n        if (x == null)\n            return buf;\n        x = x.toString();\n        len = len !== undefined ? len : x.length;\n        return len < n ? buf.substr(len) + x : x;\n    };\n});\n/**\n * Zero-padded 2 digit formatter.\n */\nexport const Z2 = padLeft(2, \"0\");\n/**\n * Zero-padded 3 digit formatter.\n */\nexport const Z3 = padLeft(3, \"0\");\n/**\n * Zero-padded 4 digit formatter.\n */\nexport const Z4 = padLeft(4, \"0\");\n","import { memoizeJ } from \"@thi.ng/memoize\";\nimport { padLeft } from \"./pad-left\";\n/**\n * Returns {@link Stringer} which formats numbers to given precision. If\n * `special` is true, then exceptional handling for:\n *\n * - NaN => \"NaN\"\n * - Infinity => \"+/-∞\"\n *\n * @param len - number of fractional digits\n * @param special - true, if special handling for NaN/Infinity values\n */\nexport const float = memoizeJ((prec, special = false) => special\n    ? (x) => nanOrInf(x) || x.toFixed(prec)\n    : (x) => x.toFixed(prec));\n/**\n * Similar to `float`, returns {@link Stringer} which formats numbers to given\n * character width & precision. Uses scientific notation if needed.\n *\n * Default precision: 3 fractional digits\n */\nexport const floatFixedWidth = memoizeJ((width, prec = 3) => {\n    const l = width - prec - 1;\n    const pl = Math.pow(10, l);\n    const pln = -Math.pow(10, l - 1);\n    const pr = Math.pow(10, -(prec - 1));\n    const pad = padLeft(width);\n    return (x) => {\n        const ax = Math.abs(x);\n        return pad(nanOrInf(x) ||\n            (x === 0\n                ? \"0\"\n                : ax < pr || ax >= pl\n                    ? exp(x, width)\n                    : x.toFixed(prec - (x < pln ? 1 : 0))));\n    };\n});\nconst exp = (x, w) => x.toExponential(Math.max(w -\n    4 -\n    (Math.log(Math.abs(x)) / Math.LN10 >= 10 ? 2 : 1) -\n    (x < 0 ? 1 : 0), 0));\nconst nanOrInf = (x) => isNaN(x)\n    ? \"NaN\"\n    : x === Infinity\n        ? \"+∞\"\n        : x === -Infinity\n            ? \"-∞\"\n            : undefined;\n","/**\n * Returns {@link Stringer} which formats given fractions as percentage (e.g.\n * `0.1234 => 12.34%`).\n *\n * @param prec - number of fractional digits (default: 0)\n */\nexport const percent = (prec = 0) => (x) => (x * 100).toFixed(prec) + \"%\";\n","import { float, percent } from \"@thi.ng/strings\";\n/**\n * RGB black\n */\nexport const BLACK = Object.freeze([0, 0, 0, 1]);\n/**\n * RGB white\n */\nexport const WHITE = Object.freeze([1, 1, 1, 1]);\n/**\n * RGB red\n */\nexport const RED = Object.freeze([1, 0, 0, 1]);\n/**\n * RGB green\n */\nexport const GREEN = Object.freeze([0, 1, 0, 1]);\n/**\n * RGB blue\n */\nexport const BLUE = Object.freeze([0, 0, 1, 1]);\n/**\n * RGB cyan\n */\nexport const CYAN = Object.freeze([0, 1, 1, 1]);\n/**\n * RGB magenta\n */\nexport const MAGENTA = Object.freeze([1, 0, 1, 1]);\n/**\n * RGB yellow\n */\nexport const YELLOW = Object.freeze([1, 1, 0, 1]);\n/**\n * ITU-R BT.601 RGB luminance coeffs\n *\n * @remarks\n * Reference:\n * https://en.wikipedia.org/wiki/YCbCr#ITU-R_BT.601_conversion\n */\nexport const RGB_LUMINANCE_REC601 = [0.299, 0.587, 0.114];\n/**\n * ITU-R BT.709 RGB luminance coeffs\n *\n * @remarks\n * Reference:\n * https://en.wikipedia.org/wiki/YCbCr#ITU-R_BT.709_conversion\n */\nexport const RGB_LUMINANCE_REC709 = [0.2126, 0.7152, 0.0722];\n/**\n * ITU-R BT.2020 RGB luminance coeffs\n *\n * @remarks\n * Reference:\n * https://en.wikipedia.org/wiki/YCbCr#ITU-R_BT.2020_conversion\n */\nexport const RGB_LUMINANCE_REC2020 = [0.2627, 0.678, 0.0593];\n/**\n * sRGB to XYZ D65 conversion matrix\n *\n * @remarks\n * Reference:\n * http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n */\nexport const RGB_XYZ_D50 = [\n    0.4360747,\n    0.2225045,\n    0.0139322,\n    0.3850649,\n    0.7168786,\n    0.0971045,\n    0.1430804,\n    0.0606169,\n    0.7141733,\n];\n/**\n * XYZ D50 to sRGB conversion matrix\n *\n * @remarks\n * Reference:\n * http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n */\nexport const XYZ_RGB_D50 = [\n    3.1338561,\n    -0.9787684,\n    0.0719453,\n    -1.6168667,\n    1.9161415,\n    -0.2289914,\n    -0.4906146,\n    0.033454,\n    1.4052427,\n];\n/**\n * sRGB to XYZ D65 conversion matrix\n *\n * @remarks\n * Reference:\n * http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n */\nexport const RGB_XYZ_D65 = [\n    0.4124564,\n    0.2126729,\n    0.0193339,\n    0.3575761,\n    0.7151522,\n    0.119192,\n    0.1804375,\n    0.072175,\n    0.9503041,\n];\n/**\n * XYZ D65 to sRGB conversion matrix\n *\n * @remarks\n * Reference:\n * http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n */\nexport const XYZ_RGB_D65 = [\n    3.2404542,\n    -0.969266,\n    0.0556434,\n    -1.5371385,\n    1.8760108,\n    -0.2040259,\n    -0.4985314,\n    0.041556,\n    1.0572252,\n];\n/**\n * D50 -> D65 chromatic adaptation matrix. Inverse of {@link BRADFORD_D65_D50}.\n *\n * @remarks\n * Reference:\n * http://www.brucelindbloom.com/index.html?Eqn_ChromAdapt.html\n */\nexport const BRADFORD_D50_D65 = [\n    0.9555766,\n    -0.0282895,\n    0.0122982,\n    -0.0230393,\n    1.0099416,\n    -0.020483,\n    0.0631636,\n    0.0210077,\n    1.3299098,\n];\n/**\n * D65 -> D50 chromatic adaptation matrix. Inverse of {@link BRADFORD_D50_D65}.\n *\n * @remarks\n * Reference:\n * http://www.brucelindbloom.com/index.html?Eqn_ChromAdapt.html\n */\nexport const BRADFORD_D65_D50 = [\n    1.0478112,\n    0.0295424,\n    -0.0092345,\n    0.0228866,\n    0.9904844,\n    0.0150436,\n    -0.050127,\n    -0.0170491,\n    0.7521316,\n];\n/**\n * CIE Standard Illuminant D50\n */\nexport const D50 = [0.96422, 1, 0.82521];\n/**\n * CIE Standard Illuminant D65\n *\n * Reference:\n * https://en.wikipedia.org/wiki/Illuminant_D65\n */\nexport const D65 = [0.95047, 1, 1.08883];\nexport const OKLAB_M1 = [\n    0.8189330101,\n    0.0329845436,\n    0.0482003018,\n    0.3618667424,\n    0.9293118715,\n    0.2643662691,\n    -0.1288597137,\n    0.0361456387,\n    0.633851707,\n];\nexport const OKLAB_M2 = [\n    0.2104542553,\n    1.9779984951,\n    0.0259040371,\n    0.793617785,\n    -2.428592205,\n    0.7827717662,\n    -0.0040720468,\n    0.4505937099,\n    -0.808675766,\n];\n/**\n * Float value formatter\n *\n * @internal\n */\nexport let FF = float(3);\n/**\n * Percentage value formatter\n *\n * @internal\n */\nexport let PC = percent(3);\n/**\n * Sets precision for CSS formatted values to `x` significant digits (default:\n * 3).\n *\n * @param x\n */\nexport const setPrecision = (x) => {\n    FF = float(x);\n    PC = percent(x);\n};\nexport const INV8BIT = 1 / 0xff;\nexport const EPS = 1 / 256;\n","export const CSS_NAMES = {\n    aliceblue: \"f0f8ff\",\n    antiquewhite: \"faebd7\",\n    aqua: \"0ff\",\n    aquamarine: \"7fffd4\",\n    azure: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"000\",\n    blanchedalmond: \"ffebcd\",\n    blue: \"00f\",\n    blueviolet: \"8a2be2\",\n    brown: \"a52a2a\",\n    burlywood: \"deb887\",\n    cadetblue: \"5f9ea0\",\n    chartreuse: \"7fff00\",\n    chocolate: \"d2691e\",\n    coral: \"ff7f50\",\n    cornflowerblue: \"6495ed\",\n    cornsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"0ff\",\n    darkblue: \"00008b\",\n    darkcyan: \"008b8b\",\n    darkgoldenrod: \"b8860b\",\n    darkgray: \"a9a9a9\",\n    darkgreen: \"006400\",\n    darkgrey: \"a9a9a9\",\n    darkkhaki: \"bdb76b\",\n    darkmagenta: \"8b008b\",\n    darkolivegreen: \"556b2f\",\n    darkorange: \"ff8c00\",\n    darkorchid: \"9932cc\",\n    darkred: \"8b0000\",\n    darksalmon: \"e9967a\",\n    darkseagreen: \"8fbc8f\",\n    darkslateblue: \"483d8b\",\n    darkslategray: \"2f4f4f\",\n    darkslategrey: \"2f4f4f\",\n    darkturquoise: \"00ced1\",\n    darkviolet: \"9400d3\",\n    deeppink: \"ff1493\",\n    deepskyblue: \"00bfff\",\n    dimgray: \"696969\",\n    dimgrey: \"696969\",\n    dodgerblue: \"1e90ff\",\n    firebrick: \"b22222\",\n    floralwhite: \"fffaf0\",\n    forestgreen: \"228b22\",\n    fuchsia: \"f0f\",\n    gainsboro: \"dcdcdc\",\n    ghostwhite: \"f8f8ff\",\n    gold: \"ffd700\",\n    goldenrod: \"daa520\",\n    gray: \"808080\",\n    grey: \"808080\",\n    green: \"008000\",\n    greenyellow: \"adff2f\",\n    honeydew: \"f0fff0\",\n    hotpink: \"ff69b4\",\n    indianred: \"cd5c5c\",\n    indigo: \"4b0082\",\n    ivory: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavender: \"e6e6fa\",\n    lavenderblush: \"fff0f5\",\n    lawngreen: \"7cfc00\",\n    lemonchiffon: \"fffacd\",\n    lightblue: \"add8e6\",\n    lightcoral: \"f08080\",\n    lightcyan: \"e0ffff\",\n    lightgoldenrodyellow: \"fafad2\",\n    lightgray: \"d3d3d3\",\n    lightgreen: \"90ee90\",\n    lightgrey: \"d3d3d3\",\n    lightpink: \"ffb6c1\",\n    lightsalmon: \"ffa07a\",\n    lightseagreen: \"20b2aa\",\n    lightskyblue: \"87cefa\",\n    lightslategray: \"789\",\n    lightslategrey: \"789\",\n    lightsteelblue: \"b0c4de\",\n    lightyellow: \"ffffe0\",\n    lime: \"0f0\",\n    limegreen: \"32cd32\",\n    linen: \"faf0e6\",\n    magenta: \"f0f\",\n    maroon: \"800000\",\n    mediumaquamarine: \"66cdaa\",\n    mediumblue: \"0000cd\",\n    mediumorchid: \"ba55d3\",\n    mediumpurple: \"9370db\",\n    mediumseagreen: \"3cb371\",\n    mediumslateblue: \"7b68ee\",\n    mediumspringgreen: \"00fa9a\",\n    mediumturquoise: \"48d1cc\",\n    mediumvioletred: \"c71585\",\n    midnightblue: \"191970\",\n    mintcream: \"f5fffa\",\n    mistyrose: \"ffe4e1\",\n    moccasin: \"ffe4b5\",\n    navajowhite: \"ffdead\",\n    navy: \"000080\",\n    oldlace: \"fdf5e6\",\n    olive: \"808000\",\n    olivedrab: \"6b8e23\",\n    orange: \"ffa500\",\n    orangered: \"ff4500\",\n    orchid: \"da70d6\",\n    palegoldenrod: \"eee8aa\",\n    palegreen: \"98fb98\",\n    paleturquoise: \"afeeee\",\n    palevioletred: \"db7093\",\n    papayawhip: \"ffefd5\",\n    peachpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pink: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powderblue: \"b0e0e6\",\n    purple: \"800080\",\n    red: \"f00\",\n    rosybrown: \"bc8f8f\",\n    royalblue: \"4169e1\",\n    saddlebrown: \"8b4513\",\n    salmon: \"fa8072\",\n    sandybrown: \"f4a460\",\n    seagreen: \"2e8b57\",\n    seashell: \"fff5ee\",\n    sienna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyblue: \"87ceeb\",\n    slateblue: \"6a5acd\",\n    slategray: \"708090\",\n    slategrey: \"708090\",\n    snow: \"fffafa\",\n    springgreen: \"00ff7f\",\n    steelblue: \"4682b4\",\n    tan: \"d2b48c\",\n    teal: \"008080\",\n    thistle: \"d8bfd8\",\n    tomato: \"ff6347\",\n    turquoise: \"40e0d0\",\n    violet: \"ee82ee\",\n    wheat: \"f5deb3\",\n    white: \"fff\",\n    whitesmoke: \"f5f5f5\",\n    yellow: \"ff0\",\n    yellowgreen: \"9acd32\",\n    // additions\n    transparent: \"0000\",\n    rebeccapurple: \"639\",\n};\n","/**\n * Default CSS system colors used by {@link parseCss}. Use\n * {@link setSystemColors} to provide custom defaults.\n */\nexport let CSS_SYSTEM_COLORS = {\n    canvas: \"fff\",\n    canvastext: \"000\",\n    linktext: \"001ee4\",\n    visitedtext: \"4e2386\",\n    activetext: \"eb3323\",\n    buttonface: \"ddd\",\n    buttontext: \"000\",\n    buttonborder: \"000\",\n    field: \"fff\",\n    fieldtext: \"000\",\n    highlight: \"bbd5fb\",\n    highlighttext: \"000\",\n    mark: \"000\",\n    marktext: \"fff\",\n    graytext: \"808080\",\n};\n/**\n * Merges {@link CSS_SYSTEM_COLORS} w/ new values.\n *\n * @param cols\n */\nexport const setSystemColors = (cols) => Object.assign(CSS_SYSTEM_COLORS, cols);\n","import { assert } from \"@thi.ng/api\";\nimport { isArray } from \"@thi.ng/checks\";\nimport { unsupported } from \"@thi.ng/errors\";\nexport const CONVERSIONS = {};\n/**\n * Registers conversions for given {@link ColorSpec}. Called by\n * {@link defColor}.\n *\n * @param spec\n *\n * @internal\n */\nexport const defConversions = (mode, spec) => {\n    for (let id in spec) {\n        const val = spec[id];\n        if (isArray(val)) {\n            const [a, b, c, d] = val;\n            spec[id] =\n                val.length === 2\n                    ? (out, src) => b(out, a(out, src))\n                    : val.length === 3\n                        ? (out, src) => c(out, b(out, a(out, src)))\n                        : (out, src) => d(out, c(out, b(out, a(out, src))));\n        }\n    }\n    CONVERSIONS[mode] = spec;\n};\nexport const convert = (res, src, destMode, srcMode) => {\n    const spec = CONVERSIONS[destMode];\n    assert(!!spec, `no conversions available for ${destMode}`);\n    let $convert = spec[srcMode];\n    return $convert\n        ? $convert(res, src)\n        : CONVERSIONS.rgb[srcMode]\n            ? spec.rgb(res, CONVERSIONS.rgb[srcMode]([], src))\n            : unsupported(`can't convert: ${srcMode} -> ${destMode}`);\n};\n","import { setC4 } from \"@thi.ng/vectors\";\nimport { INV8BIT } from \"../api/constants\";\nexport const intArgb32Srgb = (out, src) => setC4(out || [], ((src >>> 16) & 0xff) * INV8BIT, ((src >>> 8) & 0xff) * INV8BIT, (src & 0xff) * INV8BIT, (src >>> 24) * INV8BIT);\nexport const intAbgr32Srgb = (out, src) => setC4(out || [], (src & 0xff) * INV8BIT, ((src >>> 8) & 0xff) * INV8BIT, ((src >>> 16) & 0xff) * INV8BIT, (src >>> 24) * INV8BIT);\nexport const intRgb24Srgb = (out, src) => intArgb32Srgb(out, src | 0xff000000);\nexport const intBgr24Srgb = (out, src) => intAbgr32Srgb(out, src | 0xff000000);\n","import { assert } from \"@thi.ng/api\";\nimport { interleave4_12_24, interleave4_16_32 } from \"@thi.ng/binary\";\nimport { isString } from \"@thi.ng/checks\";\nimport { illegalArgs, unsupported } from \"@thi.ng/errors\";\nimport { clamp01, fract, TAU } from \"@thi.ng/math\";\nimport { ParsedColor } from \"../api\";\nimport { CSS_NAMES } from \"../api/names\";\nimport { CSS_SYSTEM_COLORS } from \"../api/system\";\nimport { intArgb32Srgb } from \"../int/int-srgb\";\n/**\n * Attempts to parse given CSS color into an interim {@link ParsedColor} type\n * with {@link srgb}, {@link hsl}, {@link labD50} or {@link lch} color modes.\n * Throws an error if any of the validations during parsing failed.\n *\n * @remarks\n * The following syntax versions are supported:\n *\n * - CSS named colors\n * - CSS system colors @see {@link CSS_SYSTEM_COLORS}\n * - hex3/4/6/8\n * - `rgb(r% g% b% / a%?)`\n * - `rgb(r g b / a?)`\n * - `rgb(r,g,b)`\n * - `rgba(r,g,b,a)`\n * - `hsl(h s% l% / a%?)`\n * - `hsl(h,s%,l%)`\n * - `hsla(h,s%,l%,a)`\n * - `lab(l a b / alpha?)`\n * - `lch(l c h / alpha?)`\n *\n * Hue values can be given according to CSS Color L4 spec (raw, deg, rad, grad,\n * turn): https://www.w3.org/TR/css-color-4/#typedef-hue\n *\n * If no alpha channel is given, it will default to 1.0 (fully opaque).\n *\n * Note that any named or system CSS colors, hex colors and any RGB colors will\n * be returned as sRGB instance. In former versions of this library (pre 3.0.0),\n * there was only a single RGB type with undefined behaviour re: linear or\n * gamma-encoded versions. Since v3.0.0, {@link rgb} is only used for _linear_\n * and {@link srgb} for non-linear (gamma encoded) RGB colors (CSS uses sRGB by\n * default).\n *\n * @param src\n */\nexport const parseCss = (src) => {\n    src = (isString(src) ? src : src.deref()).toLowerCase();\n    const named = CSS_NAMES[src] || CSS_SYSTEM_COLORS[src];\n    if (named || src[0] === \"#\")\n        return new ParsedColor(\"srgb\", intArgb32Srgb([], parseHex(named || src)));\n    const parts = src.split(/[(),/ ]+/);\n    const [mode, a, b, c, d] = parts;\n    assert(parts.length === 5 || parts.length === 6, `invalid ${mode} color: ${src}`);\n    switch (mode) {\n        case \"rgb\":\n        case \"rgba\":\n            return new ParsedColor(\"srgb\", [\n                parseNumOrPercent(a),\n                parseNumOrPercent(b),\n                parseNumOrPercent(c),\n                parseAlpha(d),\n            ]);\n        case \"hsl\":\n        case \"hsla\":\n            return new ParsedColor(\"hsl\", [\n                parseHue(a),\n                parsePercent(b),\n                parsePercent(c),\n                parseAlpha(d),\n            ]);\n        case \"lab\":\n            return new ParsedColor(\"lab50\", [\n                parsePercent(a, false),\n                parseNumber(b) * 0.01,\n                parseNumber(c) * 0.01,\n                parseAlpha(d),\n            ]);\n        case \"lch\":\n            return new ParsedColor(\"lch\", [\n                parsePercent(a, false),\n                parseNumber(b) * 0.01,\n                parseHue(c),\n                parseAlpha(d),\n            ]);\n        default:\n            unsupported(`color mode: ${mode}`);\n    }\n};\nconst HUE_NORMS = {\n    rad: TAU,\n    grad: 400,\n    turn: 1,\n    deg: 360,\n    undefined: 360,\n};\nconst parseHue = (x) => {\n    const match = /^(-?[0-9.]+)(deg|rad|grad|turn)?$/.exec(x);\n    assert(!!match, `expected hue, got: ${x}`);\n    return fract(parseFloat(match[1]) / HUE_NORMS[match[2]]);\n};\nconst parseAlpha = (x) => (x ? parseNumOrPercent(x, 1) : 1);\nconst parsePercent = (x, clamp = true) => {\n    assert(/^([0-9.]+)%$/.test(x), `expected percentage, got: ${x}`);\n    const res = parseFloat(x) / 100;\n    return clamp ? clamp01(res) : res;\n};\nconst parseNumber = (x) => {\n    assert(/^-?[0-9.]+$/.test(x), `expected number, got: ${x}`);\n    return parseFloat(x);\n};\nconst parseNumOrPercent = (x, norm = 255, clamp = true) => {\n    assert(/^-?[0-9.]+%?$/.test(x), `expected number or percentage, got: ${x}`);\n    const res = parseFloat(x) / (x.endsWith(\"%\") ? 100 : norm);\n    return clamp ? clamp01(res) : res;\n};\nexport const parseHex = (src) => {\n    const match = /^#?([0-9a-f]{3,8})$/i.exec(src);\n    if (match) {\n        const hex = match[1];\n        switch (hex.length) {\n            case 3:\n                return ((interleave4_12_24(parseInt(hex, 16)) | 0xff000000) >>> 0);\n            case 4:\n                return interleave4_16_32(parseInt(hex, 16)) >>> 0;\n            case 6:\n                return (parseInt(hex, 16) | 0xff000000) >>> 0;\n            case 8:\n                return parseInt(hex, 16) >>> 0;\n            default:\n        }\n    }\n    return illegalArgs(`invalid hex color: \"${src}\"`);\n};\n","import { clamp01 } from \"@thi.ng/math\";\nexport const ensureAlpha = (x, def = 1) => x != undefined ? clamp01(x) : def;\n","/**\n * Maps a single linear RGB channel value to sRGB.\n *\n * {@link https://en.wikipedia.org/wiki/SRGB}\n *\n * @param x - channel value\n */\nexport const linearSrgb = (x) => x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055;\n/**\n * Maps a single linear sRGB channel value to linear RGB.\n *\n * {@link https://en.wikipedia.org/wiki/SRGB}\n *\n * @param x - channel value\n */\nexport const srgbLinear = (x) => x <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);\n","import { clamp01, fract } from \"@thi.ng/math\";\nimport { setC4 } from \"@thi.ng/vectors\";\n/**\n * Converts a normalized hue to RGBA with given optional `alpha`\n * value (default: 1).\n *\n * @param out - result\n * @param hue - normalized hue\n */\nexport const hueRgb = (out, hue, alpha = 1) => {\n    hue = fract(hue) * 6;\n    return setC4(out || [], clamp01(Math.abs(hue - 3) - 1), clamp01(2 - Math.abs(hue - 2)), clamp01(2 - Math.abs(hue - 4)), alpha);\n};\nexport const namedHueRgb = (out, hue, alpha = 1) => hueRgb(out, hue / 12, alpha);\n","import { dot3 } from \"@thi.ng/vectors\";\nimport { RGB_LUMINANCE_REC709, RGB_LUMINANCE_REC601 } from \"../api/constants\";\n/**\n * Computes RGB luminance, optionally using provided weights (by default:\n * {@link RGB_LUMINANCE_REC709}).\n *\n * @param rgb\n * @param weights\n */\nexport const luminanceRgb = (rgb, weights = RGB_LUMINANCE_REC709) => dot3(rgb, weights);\n/**\n * Similar to {@link luminanceRgb}, but uses {@link RGB_LUMINANCE_REC601} coeffs\n */\nexport const luminanceSrgb = (rgb) => dot3(rgb, RGB_LUMINANCE_REC601);\nexport const luminanceIntArgb32 = (rgb) => (((rgb >>> 16) & 0xff) * 76 +\n    ((rgb >>> 8) & 0xff) * 150 +\n    (rgb & 0xff) * 29) /\n    0xfe01;\nexport const luminanceIntAbgr32 = (rgb) => (((rgb >>> 16) & 0xff) * 29 +\n    ((rgb >>> 8) & 0xff) * 150 +\n    (rgb & 0xff) * 76) /\n    0xfe01;\nexport const luminanceArgb32 = (argb) => luminanceIntArgb32(argb[0]);\nexport const luminanceAbgr32 = (argb) => luminanceIntAbgr32(argb[0]);\n","import { clamp01, fract } from \"@thi.ng/math\";\nimport { setC4 } from \"@thi.ng/vectors\";\nimport { ensureAlpha } from \"../internal/ensure-alpha\";\n/**\n * Clamps all color channels to [0,1] interval and calls `ensureAlpha`\n * to ensure alpha channel is defined (if missing sets it to `alpha`,\n * default: 1).\n *\n * @param out - result\n * @param src - source color\n * @param alpha - alpha value\n */\nexport const clamp = (out, src, alpha = 1) => setC4(out || src, clamp01(src[0]), clamp01(src[1]), clamp01(src[2]), ensureAlpha(src[3], alpha));\n/**\n * Similar to {@link clamp}, but calls `ensureHue` to fold (instead of\n * clamping) the hue into [0,1] interval.\n *\n * @param out - result\n * @param src - source color\n * @param alpha - alpha value\n */\nexport const clampH = (out, src, alpha = 1) => setC4(out || src, fract(src[0]), clamp01(src[1]), clamp01(src[2]), ensureAlpha(src[3], alpha));\n","import { clamp01, EPS } from \"@thi.ng/math\";\nimport { setC3 } from \"@thi.ng/vectors\";\nimport { clamp } from \"../ops/clamp\";\n/**\n * Based on:\n * {@link https://github.com/tobspr/GLSL-Color-Spaces/blob/develop/ColorSpaces.inc.glsl#L159}\n *\n * @param out - result\n * @param src - source color\n */\nexport const rgbHcv = (out, src) => {\n    out = clamp(out || src, src);\n    const p = out[1] < out[2]\n        ? [out[2], out[1], -1, 2 / 3]\n        : [out[1], out[2], 0, -1 / 3];\n    const q = out[0] < p[0] ? [p[0], p[1], p[3], out[0]] : [out[0], p[1], p[2], p[0]];\n    const c = q[0] - Math.min(q[1], q[3]);\n    return setC3(out, clamp01(Math.abs((q[3] - q[1]) / (6 * c + EPS) + q[2])), clamp01(c), clamp01(q[0]));\n};\n","import { clampH } from \"../ops/clamp\";\nexport const hsvHsl = (out, src) => {\n    out = clampH(out || src, src);\n    const s = out[1];\n    const v = out[2];\n    const l = ((2 - s) * v) / 2;\n    out[2] = l;\n    out[1] = l && l < 1 ? (s * v) / (l < 0.5 ? l * 2 : 2 - l * 2) : s;\n    return out;\n};\n","import { EPS } from \"@thi.ng/math\";\nimport { rgbHcv } from \"./rgb-hcv\";\nexport const rgbHsl = (out, src) => {\n    out = rgbHcv(out, src);\n    out[2] -= out[1] * 0.5;\n    out[1] /= 1 + EPS - Math.abs(out[2] * 2 - 1);\n    return out;\n};\n","import { EPS } from \"@thi.ng/math\";\nimport { rgbHcv } from \"./rgb-hcv\";\nexport const rgbHsv = (out, src) => {\n    out = rgbHcv(out, src);\n    out[1] /= out[2] + EPS;\n    return out;\n};\n","import { clamp01 } from \"@thi.ng/math\";\nimport { setC3 } from \"@thi.ng/vectors\";\nimport { hueRgb } from \"../rgb/hue-rgb\";\nimport { ensureAlpha } from \"../internal/ensure-alpha\";\nexport const hslRgb = (out, src) => {\n    const s = clamp01(src[1]);\n    const l = clamp01(src[2]);\n    out = hueRgb(out || src, src[0], ensureAlpha(src[3]));\n    const c = (1 - Math.abs(2 * l - 1)) * s;\n    return setC3(out, (out[0] - 0.5) * c + l, (out[1] - 0.5) * c + l, (out[2] - 0.5) * c + l);\n};\n","import { setC3 } from \"@thi.ng/vectors\";\nimport { clampH } from \"../ops/clamp\";\nimport { hueRgb } from \"../rgb/hue-rgb\";\nexport const hsvRgb = (out, src) => {\n    out = clampH(out || src, src);\n    const s = out[1];\n    const v = out[2];\n    hueRgb(out, src[0], out[3]);\n    return setC3(out, ((out[0] - 1) * s + 1) * v, ((out[1] - 1) * s + 1) * v, ((out[2] - 1) * s + 1) * v);\n};\n","import { setC4 } from \"@thi.ng/vectors\";\nimport { ensureAlpha } from \"../internal/ensure-alpha\";\nimport { linearSrgb } from \"../ops/linear\";\n/**\n * Converts linear RGB to sRGB.\n *\n * @param out - result\n * @param src - source color\n */\nexport const rgbSrgb = (out, src) => setC4(out || src, linearSrgb(src[0]), linearSrgb(src[1]), linearSrgb(src[2]), ensureAlpha(src[3]));\nconst GAMMA = 1 / 2.2;\nexport const rgbSrgbApprox = (out, src) => setC4(out || src, src[0] ** GAMMA, src[1] ** GAMMA, src[2] ** GAMMA, ensureAlpha(src[3]));\n","import { clamp01 } from \"@thi.ng/math\";\nimport { dotS3, dotS4, setC4 } from \"@thi.ng/vectors\";\nimport { ensureAlpha } from \"./ensure-alpha\";\nexport const mulV33 = (out, mat, src, clampOut = false) => {\n    const x = dotS3(mat, src, 0, 0, 3);\n    const y = dotS3(mat, src, 1, 0, 3);\n    const z = dotS3(mat, src, 2, 0, 3);\n    const a = ensureAlpha(src[3]);\n    return clampOut\n        ? setC4(out || src, clamp01(x), clamp01(y), clamp01(z), a)\n        : setC4(out || src, x, y, z, a);\n};\nexport const mulV45 = (out, mat, src, clampOut = true) => {\n    out = setC4(out || src, src[0], src[1], src[2], ensureAlpha(src[3]));\n    const x = dotS4(out, mat, 0, 0) + mat[4];\n    const y = dotS4(out, mat, 0, 5) + mat[9];\n    const z = dotS4(out, mat, 0, 10) + mat[14];\n    const w = dotS4(out, mat, 0, 15) + mat[19];\n    return clampOut\n        ? setC4(out, clamp01(x), clamp01(y), clamp01(z), clamp01(w))\n        : setC4(out, x, y, z, w);\n};\nexport const mulM45 = (a, b) => [\n    dotS4(b, a, 0, 0, 1, 5),\n    dotS4(b, a, 0, 1, 1, 5),\n    dotS4(b, a, 0, 2, 1, 5),\n    dotS4(b, a, 0, 3, 1, 5),\n    dotS4(b, a, 0, 4, 1, 5) + b[4],\n    dotS4(b, a, 5, 0, 1, 5),\n    dotS4(b, a, 5, 1, 1, 5),\n    dotS4(b, a, 5, 2, 1, 5),\n    dotS4(b, a, 5, 3, 1, 5),\n    dotS4(b, a, 5, 4, 1, 5) + b[9],\n    dotS4(b, a, 10, 0, 1, 5),\n    dotS4(b, a, 10, 1, 1, 5),\n    dotS4(b, a, 10, 2, 1, 5),\n    dotS4(b, a, 10, 3, 1, 5),\n    dotS4(b, a, 10, 4, 1, 5) + b[14],\n    dotS4(b, a, 15, 0, 1, 5),\n    dotS4(b, a, 15, 1, 1, 5),\n    dotS4(b, a, 15, 2, 1, 5),\n    dotS4(b, a, 15, 3, 1, 5),\n    dotS4(b, a, 15, 4, 1, 5) + b[19],\n];\n","import { setC4 } from \"@thi.ng/vectors\";\nimport { D50, D65 } from \"../api/constants\";\nimport { ensureAlpha } from \"../internal/ensure-alpha\";\nconst transform = (x) => {\n    const y = x ** 3;\n    return y > 0.008856 ? y : (x - 16 / 116) / 7.787;\n};\n/**\n * Converts Lab to XYZ using provided white point (default: {@link D50}). Also\n * see {@link labXyzD65}.\n *\n * @param out\n * @param src\n * @param white\n */\nexport const labXyz = (out, src, white = D50) => {\n    const y = (src[0] + 0.16) / 1.16;\n    return setC4(out || src, transform(src[1] / 5.0 + y) * white[0], transform(y) * white[1], transform(y - src[2] / 2.0) * white[2], ensureAlpha(src[3]));\n};\n/**\n * Same as {@link labXyz}, but using hardcoded {@link D65} white point.\n *\n * @param out\n * @param src\n */\nexport const labXyzD65 = (out, src) => labXyz(out, src, D65);\n","import { atan2Abs, INV_TAU, TAU } from \"@thi.ng/math\";\nimport { setC4 } from \"@thi.ng/vectors\";\nimport { ensureAlpha } from \"../internal/ensure-alpha\";\nexport const labLch = (out, src) => {\n    const { 1: a, 2: b } = src;\n    return setC4(out || src, src[0], Math.hypot(a, b), a === 0 && b === 0 ? 0 : atan2Abs(b, a) * INV_TAU, ensureAlpha(src[3]));\n};\nexport const lchLab = (out, src) => {\n    let { 1: c, 2: h } = src;\n    h *= TAU;\n    const a = ensureAlpha(src[3]);\n    return c > 0\n        ? setC4(out || src, src[0], Math.cos(h) * c, Math.sin(h) * c, a)\n        : setC4(out || src, src[0], 0, 0, a);\n};\n","import { XYZ_RGB_D50, XYZ_RGB_D65 } from \"../api/constants\";\nimport { mulV33 } from \"../internal/matrix-ops\";\n/**\n * Converts CIE XYZ to RGB using provided transformation/whitepoint matrix\n * (default: {@link XYZ_RGB_D50}).\n *\n * {@link https://en.wikipedia.org/wiki/CIE_1931_color_space}\n *\n * @param out - result\n * @param src - source color\n */\nexport const xyzRgb = (out, src, mat = XYZ_RGB_D50) => mulV33(out, mat, src);\n/**\n * Same as {@link xyzRgb}, but hard coded to use {@link D65} white point (via\n * {@link XYZ_RGB_D65} matrix).\n *\n * @param out\n * @param src\n */\nexport const xyzRgbD65 = (out, src) => xyzRgb(out, src, XYZ_RGB_D65);\n","import { labXyz, labXyzD65 } from \"./lab-xyz\";\nimport { xyzRgb, xyzRgbD65 } from \"../xyz/xyz-rgb\";\n/**\n * Converts Lab to linear RGB (via XYZ) using {@link D50} white point.\n *\n * @param out\n * @param src\n */\nexport const labRgb = (out, src) => xyzRgb(null, labXyz(out, src));\n/**\n * Same as {@link labRgb}, but using {@link D65} white point.\n *\n * @param out\n * @param src\n */\nexport const labRgbD65 = (out, src) => xyzRgbD65(null, labXyzD65(out, src));\n","import { clamp01, fract } from \"@thi.ng/math\";\nimport { FF, PC } from \"../api/constants\";\nimport { ensureAlpha } from \"../internal/ensure-alpha\";\nexport const hslCss = (src) => {\n    const h = FF(fract(src[0]) * 360);\n    const s = PC(clamp01(src[1]));\n    const l = PC(clamp01(src[2]));\n    const a = ensureAlpha(src[3]);\n    // TODO update to new syntax once CSS Color L4 is more widely supported\n    // https://www.w3.org/TR/css-color-4/#serializing-lab-lch\n    // https://test.csswg.org/harness/results/css-color-4_dev/grouped/ (test reports)\n    // return `hsl(${h} ${s} ${l}` + (a < 1 ? `/${FF(a)})` : \")\");\n    return a < 1 ? `hsla(${h},${s},${l},${FF(a)})` : `hsl(${h},${s},${l})`;\n};\n","import { hslCss } from \"../hsl/hsl-css\";\nimport { hsvHsl } from \"./hsv-hsl\";\nexport const hsvCss = (src) => hslCss(hsvHsl([], src));\n","import { U24 } from \"@thi.ng/strings\";\nimport { FF, INV8BIT } from \"../api/constants\";\nexport const intArgb32Css = (src) => {\n    const a = src >>> 24;\n    return a < 255\n        ? `rgba(${(src >> 16) & 0xff},${(src >> 8) & 0xff},${src & 0xff},${FF(a * INV8BIT)})`\n        : `#${U24(src & 0xffffff)}`;\n};\nexport const intRgb24Css = (src) => `#${U24(src & 0xffffff)}`;\n","import { swapLane13 } from \"@thi.ng/binary\";\n/**\n * Convert ARGB int to ABGR and vice versa.\n *\n * @param x\n */\nexport const intArgb32Abgr32 = swapLane13;\n/**\n * Alias for {@link intArgbAbgr}.\n */\nexport const intAbgr32Argb32 = swapLane13;\n","import { clamp01 } from \"@thi.ng/math\";\nimport { U24 } from \"@thi.ng/strings\";\nimport { FF } from \"../api/constants\";\nimport { ensureAlpha } from \"../internal/ensure-alpha\";\nexport const srgbCss = (src) => {\n    const r = (clamp01(src[0]) * 0xff + 0.5) | 0;\n    const g = (clamp01(src[1]) * 0xff + 0.5) | 0;\n    const b = (clamp01(src[2]) * 0xff + 0.5) | 0;\n    const a = ensureAlpha(src[3]);\n    // TODO update to `rgb(${r} ${g} ${b}/${FF(a)})` (CSS L4 syntax)\n    return a < 1\n        ? `rgba(${r},${g},${b},${FF(a)})`\n        : `#${U24((r << 16) | (g << 8) | b)}`;\n};\n","import { rgbSrgb } from \"./rgb-srgb\";\nimport { srgbCss } from \"../srgb/srgb-css\";\nexport const rgbCss = (src) => srgbCss(rgbSrgb([], src));\n","import { isNumber, isString } from \"@thi.ng/checks\";\nimport { convert } from \"../convert\";\nimport { hslCss } from \"../hsl/hsl-css\";\nimport { hsvCss } from \"../hsv/hsv-css\";\nimport { intArgb32Css } from \"../int/int-css\";\nimport { intAbgr32Argb32 } from \"../int/int-int\";\nimport { lchLab } from \"../lab/lab-lch\";\nimport { labRgb, labRgbD65 } from \"../lab/lab-rgb\";\nimport { rgbCss } from \"../rgb/rgb-css\";\nimport { rgbSrgb } from \"../rgb/rgb-srgb\";\nimport { srgbCss } from \"../srgb/srgb-css\";\n/** @internal */\nconst CSS_CONVERSIONS = {\n    abgr32: (x) => intArgb32Css(intAbgr32Argb32(x[0])),\n    argb32: (x) => intArgb32Css(x[0]),\n    hsl: hslCss,\n    hsv: hsvCss,\n    // TODO temporarily disabled until CSS L4 is officially supported in browsers\n    // currently serializing as sRGB CSS\n    // lab50: labCss,\n    // lab65: (x) => labCss(labLabD65_50([], x)),\n    // lch: lchCss,\n    lab50: (src) => srgbCss(rgbSrgb(null, labRgb([], src))),\n    lab65: (src) => srgbCss(rgbSrgb(null, labRgbD65([], src))),\n    lch: (src) => srgbCss(rgbSrgb(null, labRgb(null, lchLab([], src)))),\n    rgb: rgbCss,\n    srgb: srgbCss,\n};\n/**\n * Takes a color in one of the following formats and tries to convert it\n * to a CSS string:\n *\n * - any {@link TypedColor} instance\n * - raw sRGB(A) vector\n * - number (packed 0xaarrggbb int, MUST provide alpha channel)\n * - string (passthrough)\n *\n * @param col - source color\n */\nexport const css = (src) => {\n    let asCss;\n    return isString(src)\n        ? src\n        : isNumber(src)\n            ? intArgb32Css(src)\n            : src.mode\n                ? (asCss = CSS_CONVERSIONS[src.mode])\n                    ? asCss(src)\n                    : CSS_CONVERSIONS.rgb(convert([], src, \"rgb\", src.mode))\n                : srgbCss(src);\n};\n"],"names":["U24","$","$24"],"mappings":"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"}