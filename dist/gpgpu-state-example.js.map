{
  "version": 3,
  "sources": ["/Users/jamieowen/Workspace/packages/examples/src/gpgpu-state-example.ts"],
  "sourcesContent": ["import {\n  Object3D,\n  Group,\n  Mesh,\n  MeshBasicMaterial,\n  BoxBufferGeometry,\n  WebGLRenderer,\n  Color,\n  BufferAttribute,\n} from \"three\";\nimport {\n  sketch,\n  createStateTextureAst,\n  createDomeSimpleLight,\n  createDomeSimpleOpts,\n  createParticleStatePoints,\n  createParticleStateLineSegments,\n  encodeFillDataTexture3,\n  renderViewportTexture,\n} from \"@jamieowen/three\";\nimport {\n  program,\n  defMain,\n  uniform,\n  assign,\n  vec4,\n  vec3,\n} from \"@thi.ng/shader-ast\";\n\nimport { snoiseVec3 } from \"@thi.ng/shader-ast-stdlib\";\nimport { createGui } from \"@jamieowen/gui\";\nimport * as astParticleLib from \"@jamieowen/webgl\";\n\n/**\n *\n * Create Bounds\n *\n */\nconst createBounds = (\n  parent: Object3D,\n  scale: number = 1,\n  color: string = \"blue\"\n) => {\n  const bounds = new Mesh(\n    new BoxBufferGeometry(1, 1, 1),\n    new MeshBasicMaterial({\n      wireframe: true,\n      color: color,\n    })\n  );\n  parent.add(bounds);\n  bounds.scale.multiplyScalar(scale);\n  return bounds;\n};\n\nconst gui = createGui({\n  // ySpeed: [0]\n  curlScale: [0.0051, 0, 0.1, 0.0001],\n  curlInput: [0.742, 0.01, 10, 0.001],\n});\n\nconst createStateUpdate = (renderer: WebGLRenderer, size: number) => {\n  return createStateTextureAst(renderer, {\n    count: 3,\n    geomType: \"triangle\",\n    width: size,\n    height: size,\n    updateProgram: (target) => {\n      // Read State.\n      const read = astParticleLib.readState2();\n      const [, , input_vUv] = read.decl;\n      const [, , position, velocity, age] = read.main;\n      // Read Constants\n      const constants = astParticleLib.readConstants(input_vUv);\n      const [, mass, decay] = constants.main;\n\n      // Force Uniforms, manually created per configuration.\n      const curlScale = uniform(\"float\", \"curlScale\");\n      const curlInput = uniform(\"float\", \"curlInput\");\n      const time = uniform(\"float\", \"time\");\n\n      // Accumulate forces\n      const accumulate = astParticleLib.accumulateForces(\n        position,\n        velocity,\n        mass,\n        age,\n        [\n          astParticleLib.gravity(vec3(0.0, 0.007, 0.0)),\n          astParticleLib.curlPosition(curlScale, curlInput),\n        ]\n      );\n\n      // Possible to remove transformP and reuse position sym ( above )\n      const [transformP] = accumulate;\n      const advanceAge = astParticleLib.advanceAgeByDecay(age, decay, [\n        assign(transformP, snoiseVec3(position)),\n      ]);\n\n      return program([\n        ...read.decl,\n        ...constants.decl,\n        curlScale,\n        curlInput,\n        time,\n        defMain(() => [\n          ...read.main,\n          ...constants.main,\n          ...accumulate,\n          advanceAge,\n          assign(target.gl_FragColor, vec4(transformP, age)),\n        ]),\n      ]);\n    },\n  });\n};\n\nsketch(({ configure, render, renderer, scene, camera, controls }) => {\n  // Dome\n\n  createDomeSimpleLight(\n    scene,\n    createDomeSimpleOpts({ showHelpers: false, color: \"crimson\" })\n  );\n\n  // Containers\n  const group = new Group();\n  scene.add(group as any);\n\n  // const bounds05 = createBounds(scene);\n  // const bounds11 = createBounds(scene, 2, \"red\");\n\n  const size = 200;\n  const count = size * size;\n\n  // Create the standard constants texture. ( read by the constants AST chunk )\n  const constants = encodeFillDataTexture3(size, size, (arr, offset) => {\n    arr[offset] = Math.random(); // mass\n    arr[offset + 1] = Math.random() * 0.01 + 0.001; // decay\n    arr[offset + 2] = 0; // unused\n  });\n\n  const startData = encodeFillDataTexture3(size, size, (arr, offset) => {\n    arr[offset] = Math.random() * 2.0 - 1.0;\n    arr[offset + 1] = Math.random() * 2.0 - 1.0;\n    arr[offset + 2] = Math.random() * 2.0 - 1.0;\n    // arr[offset + 3] = 0.0; //Math.random(); // Not sure why RGBA doesn't work?\n  });\n\n  let curlInputSine = 0; // offset each frame\n\n  // Update\n  const state = createStateUpdate(renderer, size);\n  console.log(state.material.fragmentShader);\n\n  // Define custom uniforms for now.\n  // At some point do some magic and read the AST.\n  state.material.uniforms.constants = { value: constants };\n  state.material.uniforms.time = { value: 0 };\n  state.material.uniforms.curlScale = { value: gui.deref().values.curlScale };\n  state.material.uniforms.curlInput = {\n    value: gui.deref().values.curlInput + curlInputSine,\n  };\n\n  gui.subscribe({\n    next: ({ values }) => {\n      state.material.uniforms.curlScale.value = values.curlScale;\n      state.material.uniforms.curlInput.value =\n        values.curlInput + curlInputSine;\n    },\n  });\n\n  // Render Points\n\n  // Colors\n  const color = new Color();\n  const colors = new BufferAttribute(new Float32Array(size * size * 3), 3);\n  const colors2 = new BufferAttribute(new Float32Array(size * size * 3 * 2), 3);\n\n  const deg1 = 1 / 12;\n  const deg2 = deg1 * 6;\n  for (let i = 0; i < colors.count; i++) {\n    color.setHSL((Math.random() * 0.1 + 1) % 1, 0.9, 0.4 + Math.random() * 0.2);\n    // color.offsetHSL(0.5, 0, 0);\n\n    if (Math.random() > 0.9) {\n      color.setHSL(1, Math.random() * 0.3 + 0.7, Math.random() * 0.3 + 0.7);\n    }\n    colors.setXYZ(i, color.r, color.g, color.b);\n    colors2.setXYZ(i * 2, color.r, color.g, color.b);\n    colors2.setXYZ(i * 2 + 1, color.r, color.g, color.b);\n  }\n  colors.needsUpdate = true;\n\n  // Check renderer for required uniform updates.\n  const renderPoints = createParticleStatePoints(count, state, colors);\n  group.add(renderPoints);\n  // renderPoints.position.x = 2.0;\n  console.log(\"Render Points :\", renderPoints);\n  const renderLines = createParticleStateLineSegments(count, state, colors2);\n  group.add(renderLines);\n  console.log(\"Render Lines:\", renderLines);\n\n  // Write Start Data.\n\n  state.write(startData);\n  // state.update();\n\n  controls.object.position.set(0, -1, 0);\n  controls.object.position.multiplyScalar(1);\n\n  controls.update();\n\n  render((clock) => {\n    // Update Sim\n    state.material.uniforms.time.value = clock.time;\n\n    curlInputSine = Math.cos(clock.time) * Math.sin(clock.time * 25) * 0.05;\n    state.material.uniforms.curlInput.value =\n      gui.deref().values.curlInput + curlInputSine;\n\n    group.rotation.y += 0.01;\n    // if (clock.time < 1) {\n    state.update();\n    // }\n\n    // Render\n    renderer.autoClear = false;\n    renderer.clear();\n    renderer.render(scene, camera);\n\n    // group.rotation.y += 0.01;\n\n    const psize = 128;\n    // Render Texture\n    renderViewportTexture(renderer, state.preview.texture, {\n      x: 0,\n      y: 0,\n      width: Math.min(psize, size),\n      height: Math.min(psize, size),\n    });\n\n    renderViewportTexture(renderer, state.states[2].texture, {\n      x: Math.min(psize, size) + 1,\n      y: 0,\n      width: Math.min(psize, size),\n      height: Math.min(psize, size),\n    });\n\n    return false;\n  });\n});\n"],
  "mappings": "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",
  "names": []
}
