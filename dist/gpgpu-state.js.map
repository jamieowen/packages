{
  "version": 3,
  "sources": ["/Users/jamieowen/Workspace/packages/examples/src/gpgpu-state.ts"],
  "sourcesContent": ["import {\n  Mesh,\n  MeshBasicMaterial,\n  WebGLRenderer,\n  DoubleSide,\n  Group,\n} from \"three\";\nimport {\n  sketch,\n  createStateTextureAst,\n  createDomeSimpleLight,\n  createDomeSimpleOpts,\n  createGeometryFactory,\n  GeometryAlignment,\n  encodeFillDataTexture4,\n} from \"@jamieowen/three\";\nimport {\n  program,\n  defMain,\n  uniform,\n  assign,\n  vec4,\n  vec3,\n  sym,\n  texture,\n  input,\n  $xyz,\n  mul,\n  $w,\n  ifThen,\n  length,\n  lte,\n  float,\n} from \"@thi.ng/shader-ast\";\n\nconst createStateUpdate = (renderer: WebGLRenderer, size: number) => {\n  return createStateTextureAst(renderer, {\n    count: 3,\n    geomType: \"triangle\",\n    width: size,\n    height: size,\n    updateProgram: (target) => {\n      // Read State.\n      const uni_state1 = uniform(\"sampler2D\", \"state_1\");\n      const uni_state2 = uniform(\"sampler2D\", \"state_2\");\n      const input_vUv = input(\"vec2\", \"vReadUV\"); // TODO: Rename vReadUV - vUv\n\n      // Main\n      const s1 = sym(texture(uni_state1, input_vUv));\n      const s2 = sym(texture(uni_state2, input_vUv));\n\n      const time = uniform(\"float\", \"time\");\n\n      return program([\n        uni_state1,\n        uni_state2,\n        input_vUv,\n        time,\n        defMain(() => [\n          s1,\n          s2,\n          ifThen(lte(length($xyz(s1)), float(0.001)), [\n            assign($xyz(s1), vec3(1.0)),\n          ]),\n          assign(target.gl_FragColor, vec4(mul($xyz(s1), $w(s1)), $w(s1))),\n        ]),\n      ]);\n    },\n  });\n};\n\nsketch(({ render, renderer, scene, controls }) => {\n  const { lights } = createDomeSimpleLight(\n    scene,\n    createDomeSimpleOpts({ showHelpers: true, color: \"#eeeeff\" })\n  );\n\n  lights[1].position.x += 2;\n\n  const size = 128;\n\n  const startData = encodeFillDataTexture4(size, size, (arr, offset) => {\n    arr[offset] = Math.random() * 2.0 - 1.0;\n    arr[offset + 1] = Math.random() * 2.0 - 1.0;\n    arr[offset + 2] = Math.random() * 2.0 - 1.0;\n    arr[offset + 3] = 0.9 + Math.random() * 0.09; // set some decay speed\n  });\n\n  // Update\n  const state = createStateUpdate(renderer, size);\n  state.material.uniforms.time = { value: 0 };\n\n  // Write Start Data.\n  state.write(startData);\n  // state.update();\n\n  // Display texture for state.\n  const gf = createGeometryFactory();\n  const geom = gf.create(\"plane\", GeometryAlignment.BOTTOM);\n  const mesh1 = new Mesh(geom, new MeshBasicMaterial({ side: DoubleSide }));\n  const mesh2 = new Mesh(geom, new MeshBasicMaterial({ side: DoubleSide }));\n  const group = new Group();\n  group.add(mesh1, mesh2);\n  scene.add(group);\n\n  mesh1.position.set(-0.55, 0, 0);\n  mesh2.position.set(0.55, 0, 0);\n  group.scale.multiplyScalar(6);\n  mesh1.castShadow = mesh2.castShadow = true;\n\n  renderer.shadowMap.enabled = true;\n\n  controls.target.y = 2.8;\n  controls.target.x = -0.2;\n  controls.object.position.y = 2;\n  controls.object.position.x -= 2;\n  controls.object.position.multiplyScalar(1.5);\n  controls.update();\n\n  render((clock) => {\n    state.material.uniforms.time.value = clock.time;\n    state.update();\n\n    (mesh1.material as MeshBasicMaterial).map = state.states[1].texture;\n    (mesh2.material as MeshBasicMaterial).map = state.states[2].texture;\n  });\n});\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA,MAAM,oBAAoB,CAAC,UAAyB,SAAiB;AACnE,SAAO,sBAAsB,UAAU;AAAA,IACrC,OAAO;AAAA,IACP,UAAU;AAAA,IACV,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,eAAe,CAAC,WAAW;AAEzB,YAAM,aAAa,QAAQ,aAAa;AACxC,YAAM,aAAa,QAAQ,aAAa;AACxC,YAAM,YAAY,MAAM,QAAQ;AAGhC,YAAM,KAAK,IAAI,QAAQ,YAAY;AACnC,YAAM,KAAK,IAAI,QAAQ,YAAY;AAEnC,YAAM,OAAO,QAAQ,SAAS;AAE9B,aAAO,QAAQ;AAAA,QACb;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,QAAQ,MAAM;AAAA,UACZ;AAAA,UACA;AAAA,UACA,OAAO,IAAI,OAAO,KAAK,MAAM,MAAM,QAAS;AAAA,YAC1C,OAAO,KAAK,KAAK,KAAK;AAAA;AAAA,UAExB,OAAO,OAAO,cAAc,KAAK,IAAI,KAAK,KAAK,GAAG,MAAM,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAOrE,OAAO,CAAC,CAAE,QAAQ,UAAU,OAAO,cAAe;AAChD,QAAM,CAAE,UAAW,sBACjB,OACA,qBAAqB,CAAE,aAAa,MAAM,OAAO;AAGnD,SAAO,GAAG,SAAS,KAAK;AAExB,QAAM,OAAO;AAEb,QAAM,YAAY,uBAAuB,MAAM,MAAM,CAAC,KAAK,WAAW;AACpE,QAAI,UAAU,KAAK,WAAW,IAAM;AACpC,QAAI,SAAS,KAAK,KAAK,WAAW,IAAM;AACxC,QAAI,SAAS,KAAK,KAAK,WAAW,IAAM;AACxC,QAAI,SAAS,KAAK,MAAM,KAAK,WAAW;AAAA;AAI1C,QAAM,QAAQ,kBAAkB,UAAU;AAC1C,QAAM,SAAS,SAAS,OAAO,CAAE,OAAO;AAGxC,QAAM,MAAM;AAIZ,QAAM,KAAK;AACX,QAAM,OAAO,GAAG,OAAO,SAAS,kBAAkB;AAClD,QAAM,QAAQ,IAAI,KAAK,MAAM,IAAI,kBAAkB,CAAE,MAAM;AAC3D,QAAM,QAAQ,IAAI,KAAK,MAAM,IAAI,kBAAkB,CAAE,MAAM;AAC3D,QAAM,QAAQ,IAAI;AAClB,QAAM,IAAI,OAAO;AACjB,QAAM,IAAI;AAEV,QAAM,SAAS,IAAI,OAAO,GAAG;AAC7B,QAAM,SAAS,IAAI,MAAM,GAAG;AAC5B,QAAM,MAAM,eAAe;AAC3B,QAAM,aAAa,MAAM,aAAa;AAEtC,WAAS,UAAU,UAAU;AAE7B,WAAS,OAAO,IAAI;AACpB,WAAS,OAAO,IAAI;AACpB,WAAS,OAAO,SAAS,IAAI;AAC7B,WAAS,OAAO,SAAS,KAAK;AAC9B,WAAS,OAAO,SAAS,eAAe;AACxC,WAAS;AAET,SAAO,CAAC,UAAU;AAChB,UAAM,SAAS,SAAS,KAAK,QAAQ,MAAM;AAC3C,UAAM;AAEN,IAAC,MAAM,SAA+B,MAAM,MAAM,OAAO,GAAG;AAC5D,IAAC,MAAM,SAA+B,MAAM,MAAM,OAAO,GAAG;AAAA;AAAA;",
  "names": []
}
