{
  "version": 3,
  "sources": ["/Users/jamieowen/Workspace/packages/packages/color/src/calc.ts"],
  "sourcesContent": ["import { Color, hsvRgb, luminanceRgb, rgbHsv } from \"@thi.ng/color\";\n\n/**\n * Calculate the complementary color using RGB space ( rather than RYB )\n * @param out\n * @param rgba\n */\nexport const complement = (rgba: Color) => {\n  const hsva = rgbHsv([], rgba);\n  hsva[0] = hsva[0] + (0.5 % 1);\n  return hsvRgb([], hsva);\n};\n\n/**\n * Calculate the contrast ratio between colors.\n * version 1 with default @thi.ng luminance coefficients.\n * @param col1\n * @param col2\n * @param colorMode\n */\nexport const contrastRatio1 = (col1: Color, col2: Color) => {\n  const lum1 = luminanceRgb(col1);\n  const lum2 = luminanceRgb(col2);\n  return (Math.max(lum1, lum2) + 0.05) / (Math.min(lum1, lum2) + 0.05);\n};\n\n// https://openaccess.thecvf.com/content_cvpr_2017/papers/Nguyen_Why_You_Should_CVPR_2017_paper.pdf\n// https://www.accessibility-developer-guide.com/knowledge/colours-and-contrast/how-to-calculate/\n// Using different luminance coefficients\n// Except seems to adjust for gamma correction\n// As : https://contrast-ratio.com\n\nconst RGB_LUMINANCE_2 = [0.2126, 0.7152, 0.0722];\n\n/**\n * Calculate the contrast ratio between colors.\n * version 2 with alternative coefficients ( 0.2126, 0.7152, 0.0722 )\n * @param col1\n * @param col2\n * @param colorMode\n */\nexport const contrastRatio2 = (col1: Color, col2: Color) => {\n  const lum1 = luminanceRgb(col1, RGB_LUMINANCE_2);\n  const lum2 = luminanceRgb(col2, RGB_LUMINANCE_2);\n  return (Math.max(lum1, lum2) + 0.05) / (Math.min(lum1, lum2) + 0.05);\n};\n\n/**\n * Attempt to find the closest colors to the supplied min and max ranges.\n * @param min\n * @param max\n * @param color\n */\n// export const findLuminanceRange = (\n//   min: number,\n//   max: number,\n//   color: Color\n// ) => {};\n\n/**\n * Return the nearest color with the given luminance to the supplied color.\n * @param targetLum\n * @param color\n */\n// export const findNearestColorLuminance = (\n//   targetLum: number,\n//   color: Color\n// ): Color => {\n//   // supplied color t V ( hsva ) & luminance\n\n//   // THIS KIND OF WORKS -\n//   const hsv = rgbaHsva([], color);\n//   const lumC = luminanceRGB(color, RGB_LUMINANCE_2);\n//   const ratio = targetLum / lumC;\n//   return hsvaRgba([], [hsv[0], hsv[1], hsv[2] * ratio, hsv[3]]);\n//   // return\n//   // const resLum = luminanceRGB(res, RGB_LUMINANCE_2);\n\n//   // console.log(\"NEAREST LUM :RES \", res, resLum, targetLum);\n// };\n\n// const near = (val: number, min: number, max: number) => {\n//   if (val > min && val < max) {\n//     return true;\n//   } else {\n//     return false;\n//   }\n// };\n\n// take a color.\n// create a complement rotation... with an optional min max offset.\n\n// Luminance balance.\n// Normalise/Limit 2 colours ( or number of colours? ) to an overall sum luminance\n\n// Can the same be done to reduce or increase a contrast ratio?\n\n// distribution. create a numner of additional colours as tints/adjustments of provided base colours.\n// supply a 'percentage split' i.e. 60, 30,10 rule\n"],
  "mappings": "AAAA;AAOO,aAAM,aAAa,CAAC,SAAgB;AACzC,QAAM,OAAO,OAAO,IAAI;AACxB,OAAK,KAAK,KAAK,KAAM,MAAM;AAC3B,SAAO,OAAO,IAAI;AAAA;AAUb,aAAM,iBAAiB,CAAC,MAAa,SAAgB;AAC1D,QAAM,OAAO,aAAa;AAC1B,QAAM,OAAO,aAAa;AAC1B,SAAQ,MAAK,IAAI,MAAM,QAAQ,QAAS,MAAK,IAAI,MAAM,QAAQ;AAAA;AASjE,MAAM,kBAAkB,CAAC,QAAQ,QAAQ;AASlC,aAAM,iBAAiB,CAAC,MAAa,SAAgB;AAC1D,QAAM,OAAO,aAAa,MAAM;AAChC,QAAM,OAAO,aAAa,MAAM;AAChC,SAAQ,MAAK,IAAI,MAAM,QAAQ,QAAS,MAAK,IAAI,MAAM,QAAQ;AAAA;",
  "names": []
}
