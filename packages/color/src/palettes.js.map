{
  "version": 3,
  "sources": ["/Users/jamieowen/Workspace/packages/packages/color/src/palettes.ts"],
  "sourcesContent": ["import { CSS_NAMES, parseCss, Color, rgbHsl, css, hslRgb } from \"@thi.ng/color\";\nimport { complement } from \"./calc\";\nimport { Color2 } from \"./types\";\nimport { mul4, mulN4, add4, sub4, clamp4, div4 } from \"@thi.ng/vectors\";\n\nexport { CSS_NAMES, parseCss };\nexport const colorAsCSS = (color: Color) => {\n  return css(color);\n};\n\n/**\n * Css named colors as rgba. Losing name info.\n */\nexport const paletteCssNames = (): Color[] =>\n  Object.keys(CSS_NAMES).map((name) => parseCss(name).deref());\n\n/**\n * Generate the complementary colors for all colors\n * @param colors\n */\nexport const paletteComplement = (colors: Color[]): Color2[] =>\n  colors.map((color) => [color, complement(color)]);\n\n/**\n * Generate a decent foreground and background base color from a given color.\n * @param color\n */\nexport const paletteForegroundBackground = (\n  color: Color,\n  opts?: Partial<{\n    // apply a saturation multiplier to the foreground or background\n    saturation: [number, number];\n    // invert ( lighter bg, darker fg )\n    invert: boolean;\n    // clamp the lightness ( unless contrast ratio )\n    clamp: [number, number];\n  }>\n) => {\n  const { saturation = [1, 1], invert = false, clamp = [0.1, 0.9] } =\n    opts || {};\n\n  const hsl = rgbHsl([], color);\n  const bg = [hsl[0], hsl[1] * saturation[0], clamp[0], hsl[3]];\n  const fg = [hsl[0], hsl[1] * saturation[1], clamp[1], hsl[3]];\n\n  const res = [hslRgb(null, bg), hslRgb(null, fg)];\n  if (invert) {\n    return [res[1], res[0]];\n  } else {\n    return res;\n  }\n};\n\nexport const paletteContrastRatioDiff = (color: Color, opts: {}) => {\n  return null;\n};\n\n/**\n * Generate a range of shadows for the given color.\n * The input color's lightness is scaled by a given amount and then a\n * gradient is generated given + / - the specified range from the scaled lightness.\n *\n * TODO: Modularise / resue the step function and;\n * TODO: Potentially use a different method than scale. Which works for colors closer to the upper/lower lightness threshold\n * TODO: Add some noise factor to introduce variation between gradient or introduce saturation shifts.\n */\n\n/**\n * @param color\n * @param opts\n */\nexport const paletteColorRangeHSL = (\n  color: Color,\n  opts: Partial<{\n    steps: number;\n    scale: number;\n    range: number;\n    saturation: number;\n    clamp: [number, number];\n  }> = {}\n): Color[] => {\n  const {\n    steps = 5,\n    scale = 1,\n    range = 0.5,\n    saturation = 1,\n    clamp = [0, 1],\n  } = opts;\n  const hsl1 = rgbHsl([], color);\n  const mid = mul4([], hsl1, [1, saturation, scale, 1]);\n  const min = clamp4(\n    null,\n    add4([], mid, [0, 0, -range, 0]),\n    [0, 0, clamp[0], 0],\n    [1, 1, clamp[1], 1]\n  );\n  const max = clamp4(\n    null,\n    add4([], mid, [0, 0, +range, 0]),\n    [0, 0, clamp[0], 0],\n    [1, 1, clamp[1], 1]\n  );\n  const res = [];\n  const step = (max[2] - min[2]) / (steps - 1);\n\n  // Take only the lightness component and step.\n  for (let i = 0; i < steps; i++) {\n    const l = step * i;\n    res.push(hslRgb([], [mid[0], mid[1], l + min[2], mid[3]]));\n  }\n\n  return res;\n};\n\n/**\n * Create a gradient between two RGB colors, performing steps in HSL space.\n * @param color1\n * @param color2\n * @param steps\n */\nexport const paletteGradientHSL = (\n  color1: Color,\n  color2: Color,\n  steps: number\n): Color[] => {\n  const hsl1 = rgbHsl([], color1);\n  const hsl2 = rgbHsl([], color2);\n  const s1 = steps - 1;\n  const step = div4([], sub4([], hsl2, hsl1), [s1, s1, s1, s1]);\n\n  const res = [];\n  for (let i = 0; i < steps; i++) {\n    const out = add4([], hsl1, mulN4([], step, i));\n    res.push(hslRgb(null, out));\n  }\n  return res;\n};\n\n/**\n * Create a gradient between two RGB colors, performing steps in HSL space.\n * @param color1\n * @param color2\n * @param steps\n */\nexport const paletteGradientRGB = (\n  color1: Color,\n  color2: Color,\n  steps: number\n): Color[] => {\n  const s1 = steps - 1;\n  const step = div4([], sub4([], color2, color1), [s1, s1, s1, s1]);\n\n  const res = [];\n  for (let i = 0; i < steps; i++) {\n    const out = add4([], color1, mulN4([], step, i));\n    res.push(out);\n  }\n  return res;\n};\n"],
  "mappings": "AAAA;AACA;AAEA;AAEA;AACO,aAAM,aAAa,CAAC,UAAiB;AAC1C,SAAO,IAAI;AAAA;AAMN,aAAM,kBAAkB,MAC7B,OAAO,KAAK,WAAW,IAAI,CAAC,SAAS,SAAS,MAAM;AAM/C,aAAM,oBAAoB,CAAC,WAChC,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,WAAW;AAMpC,aAAM,8BAA8B,CACzC,OACA,SAQG;AACH,QAAM,CAAE,aAAa,CAAC,GAAG,IAAI,SAAS,OAAO,QAAQ,CAAC,KAAK,QACzD,QAAQ;AAEV,QAAM,MAAM,OAAO,IAAI;AACvB,QAAM,KAAK,CAAC,IAAI,IAAI,IAAI,KAAK,WAAW,IAAI,MAAM,IAAI,IAAI;AAC1D,QAAM,KAAK,CAAC,IAAI,IAAI,IAAI,KAAK,WAAW,IAAI,MAAM,IAAI,IAAI;AAE1D,QAAM,MAAM,CAAC,OAAO,MAAM,KAAK,OAAO,MAAM;AAC5C,MAAI,QAAQ;AACV,WAAO,CAAC,IAAI,IAAI,IAAI;AAAA,SACf;AACL,WAAO;AAAA;AAAA;AAIJ,aAAM,2BAA2B,CAAC,OAAc,SAAa;AAClE,SAAO;AAAA;AAiBF,aAAM,uBAAuB,CAClC,OACA,OAMK,OACO;AACZ,QAAM;AAAA,IACJ,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,aAAa;AAAA,IACb,QAAQ,CAAC,GAAG;AAAA,MACV;AACJ,QAAM,OAAO,OAAO,IAAI;AACxB,QAAM,MAAM,KAAK,IAAI,MAAM,CAAC,GAAG,YAAY,OAAO;AAClD,QAAM,MAAM,OACV,MACA,KAAK,IAAI,KAAK,CAAC,GAAG,GAAG,CAAC,OAAO,KAC7B,CAAC,GAAG,GAAG,MAAM,IAAI,IACjB,CAAC,GAAG,GAAG,MAAM,IAAI;AAEnB,QAAM,MAAM,OACV,MACA,KAAK,IAAI,KAAK,CAAC,GAAG,GAAG,CAAC,OAAO,KAC7B,CAAC,GAAG,GAAG,MAAM,IAAI,IACjB,CAAC,GAAG,GAAG,MAAM,IAAI;AAEnB,QAAM,MAAM;AACZ,QAAM,OAAQ,KAAI,KAAK,IAAI,MAAO,SAAQ;AAG1C,WAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC9B,UAAM,IAAI,OAAO;AACjB,QAAI,KAAK,OAAO,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAAA;AAGvD,SAAO;AAAA;AASF,aAAM,qBAAqB,CAChC,QACA,QACA,UACY;AACZ,QAAM,OAAO,OAAO,IAAI;AACxB,QAAM,OAAO,OAAO,IAAI;AACxB,QAAM,KAAK,QAAQ;AACnB,QAAM,OAAO,KAAK,IAAI,KAAK,IAAI,MAAM,OAAO,CAAC,IAAI,IAAI,IAAI;AAEzD,QAAM,MAAM;AACZ,WAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC9B,UAAM,MAAM,KAAK,IAAI,MAAM,MAAM,IAAI,MAAM;AAC3C,QAAI,KAAK,OAAO,MAAM;AAAA;AAExB,SAAO;AAAA;AASF,aAAM,qBAAqB,CAChC,QACA,QACA,UACY;AACZ,QAAM,KAAK,QAAQ;AACnB,QAAM,OAAO,KAAK,IAAI,KAAK,IAAI,QAAQ,SAAS,CAAC,IAAI,IAAI,IAAI;AAE7D,QAAM,MAAM;AACZ,WAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC9B,UAAM,MAAM,KAAK,IAAI,QAAQ,MAAM,IAAI,MAAM;AAC7C,QAAI,KAAK;AAAA;AAEX,SAAO;AAAA;",
  "names": []
}
