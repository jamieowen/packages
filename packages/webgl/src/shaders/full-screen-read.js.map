{
  "version": 3,
  "sources": ["/Users/jamieowen/Workspace/packages/packages/webgl/src/shaders/full-screen-read.ts"],
  "sourcesContent": ["import {\n  assign,\n  defMain,\n  input,\n  program,\n  uniform,\n  mul,\n  vec4,\n  add,\n  output,\n  $xy,\n  sym,\n  texture,\n} from \"@thi.ng/shader-ast\";\nimport { GLSLTarget } from \"@thi.ng/shader-ast-glsl\";\n\n/**\n *\n * Render a quad style geometry and\n * generate UV for GPGPU texture read.\n *\n * @param target\n */\nexport const gpgpuQuadVertexShader = (target: GLSLTarget) => {\n  const modelViewMatrix = uniform(\"mat4\", \"modelViewMatrix\", {});\n  const projectionMatrix = uniform(\"mat4\", \"projectionMatrix\");\n  const position = input(\"vec3\", \"position\");\n  const vReadUV = output(\"vec2\", \"vReadUV\");\n\n  return program([\n    modelViewMatrix,\n    projectionMatrix,\n    position,\n    vReadUV,\n    defMain(() => [\n      assign(vReadUV, add($xy(position), 0.5)),\n      assign(\n        target.gl_Position,\n        mul(projectionMatrix, mul(modelViewMatrix, vec4(position, 1.0)))\n      ),\n    ]),\n  ]);\n};\n\n/**\n *\n * Render 'big triangle' style geometry and\n * generate UV for GPGPU texture read.\n *\n * @param target\n */\nexport const gpgpuTriangleVertexShader = (target: GLSLTarget) => {\n  const position = input(\"vec3\", \"position\");\n  const vReadUV = output(\"vec2\", \"vReadUV\");\n  return program([\n    position,\n    vReadUV,\n    defMain(() => [\n      assign(vReadUV, mul(0.5, add($xy(position), 1.0))),\n      assign(target.gl_Position, vec4(position, 1.0)),\n    ]),\n  ]);\n};\n\n/**\n * UNUSED.\n * WIP for base update shader.\n * @param target\n */\nexport const gpgpuFragmentBase = (target: GLSLTarget) => {\n  const previous = uniform(\"sampler2D\", \"previous\");\n  const current = uniform(\"sampler2D\", \"current\");\n  const vReadUV = input(\"vec2\", \"vReadUV\");\n  return program([previous, current, vReadUV, defMain(() => [])]);\n};\n\n/**\n *\n * Writes an input texture or data texture\n * directly to the output buffer.\n * TODO: inputSource needs renaming.\n * @param target\n *\n */\nexport const gpgpuWriteOperation = (target: GLSLTarget) => {\n  const currentIn = uniform(\"sampler2D\", \"inputSource\");\n  const vReadUV = input(\"vec2\", \"vReadUV\");\n  const current = sym(texture(currentIn, vReadUV));\n  return program([\n    currentIn,\n    vReadUV,\n    defMain(() => [current, assign(target.gl_FragColor, current)]),\n  ]);\n};\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBO,aAAM,wBAAwB,CAAC,WAAuB;AAC3D,QAAM,kBAAkB,QAAQ,QAAQ,mBAAmB;AAC3D,QAAM,mBAAmB,QAAQ,QAAQ;AACzC,QAAM,WAAW,MAAM,QAAQ;AAC/B,QAAM,UAAU,OAAO,QAAQ;AAE/B,SAAO,QAAQ;AAAA,IACb;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,QAAQ,MAAM;AAAA,MACZ,OAAO,SAAS,IAAI,IAAI,WAAW;AAAA,MACnC,OACE,OAAO,aACP,IAAI,kBAAkB,IAAI,iBAAiB,KAAK,UAAU;AAAA;AAAA;AAAA;AAa3D,aAAM,4BAA4B,CAAC,WAAuB;AAC/D,QAAM,WAAW,MAAM,QAAQ;AAC/B,QAAM,UAAU,OAAO,QAAQ;AAC/B,SAAO,QAAQ;AAAA,IACb;AAAA,IACA;AAAA,IACA,QAAQ,MAAM;AAAA,MACZ,OAAO,SAAS,IAAI,KAAK,IAAI,IAAI,WAAW;AAAA,MAC5C,OAAO,OAAO,aAAa,KAAK,UAAU;AAAA;AAAA;AAAA;AAUzC,aAAM,oBAAoB,CAAC,WAAuB;AACvD,QAAM,WAAW,QAAQ,aAAa;AACtC,QAAM,UAAU,QAAQ,aAAa;AACrC,QAAM,UAAU,MAAM,QAAQ;AAC9B,SAAO,QAAQ,CAAC,UAAU,SAAS,SAAS,QAAQ,MAAM;AAAA;AAWrD,aAAM,sBAAsB,CAAC,WAAuB;AACzD,QAAM,YAAY,QAAQ,aAAa;AACvC,QAAM,UAAU,MAAM,QAAQ;AAC9B,QAAM,UAAU,IAAI,QAAQ,WAAW;AACvC,SAAO,QAAQ;AAAA,IACb;AAAA,IACA;AAAA,IACA,QAAQ,MAAM,CAAC,SAAS,OAAO,OAAO,cAAc;AAAA;AAAA;",
  "names": []
}
