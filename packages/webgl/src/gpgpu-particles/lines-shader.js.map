{
  "version": 3,
  "sources": ["/Users/jamieowen/Workspace/packages/packages/webgl/src/gpgpu-particles/lines-shader.ts"],
  "sourcesContent": ["import {\n  program,\n  defMain,\n  uniform,\n  assign,\n  mul,\n  vec4,\n  input,\n  sym,\n  vec2,\n  div,\n  $x,\n  mod,\n  $y,\n  texture,\n  $xyz,\n  $w,\n  sub,\n  add,\n  floor,\n  float,\n  int,\n  vec3,\n  output,\n  ifThen,\n  gt,\n  discard,\n  step,\n} from \"@thi.ng/shader-ast\";\nimport { GLSLTarget } from \"@thi.ng/shader-ast-glsl\";\nimport { ProgramAst } from \"../shaders/ast-compile-helpers\";\n\n/**\n *\n * Shader for rendering particles as lines\n * based on the velocity of the particle.\n *\n * Velocity is calculated from the difference between\n * two position states.\n *\n * @param target\n */\nexport const linesVertexShader = (target: GLSLTarget) => {\n  const projectionMatrix = uniform(\"mat4\", \"projectionMatrix\");\n  const modelViewMatrix = uniform(\"mat4\", \"modelViewMatrix\");\n  const resolution = uniform(\"vec2\", \"resolution\");\n  const state_1 = uniform(\"sampler2D\", \"state_1\");\n  const state_2 = uniform(\"sampler2D\", \"state_2\");\n\n  // Attributes\n  const position = input(\"vec3\", \"position\");\n  const color = input(\"vec3\", \"color\");\n  const vColor = output(\"vec3\", \"vColor\");\n\n  // Offsets span from 0 to count * 2.\n  // From this, the line segment start and end is determined by offset % 2\n  // And the offset for reading from the texture is offset / 2\n  const offset = input(\"float\", \"offset\");\n  const offset2 = floor(div(offset, 2.0));\n  // Read Values\n  const uv = sym(\n    div(\n      vec2(div(offset2, $x(resolution)), mod(offset2, $y(resolution))),\n      resolution\n    )\n  );\n  const readState1 = sym(texture(state_1, uv));\n  const readState2 = sym(texture(state_2, uv));\n  const stateDiff = sym(sub(readState2, readState1));\n\n  // Line/Velocity length\n  // Ensure age2 < age1 always. Otherwise lines\n  // flicker when resetting age between states.\n  const age1 = $w(readState1);\n  const age2 = $w(readState2);\n  const velCap = step(float(0), sub(age1, age2)); // cap velocity\n  const lineLen = mul(float(5.0), velCap); // multiply by line length, unless age2 > age 1\n  const vel = mul($xyz(stateDiff), lineLen); // apply\n\n  const pos = $xyz(readState1);\n  const modOffset = mod(offset, float(2.0));\n  const pos1 = add(pos, mul(vel, modOffset)); // mod the offset and add the velocity on alternating indices.\n\n  return program([\n    // Uniforms\n    projectionMatrix,\n    modelViewMatrix,\n    state_1,\n    state_2,\n    resolution,\n    // Attributes\n    position,\n    offset,\n    color,\n    vColor,\n    // Main\n    defMain(() => [\n      uv,\n      readState1,\n      readState2,\n      stateDiff,\n      assign(vColor, color),\n      // assign(vColor, vec3(0.7)),\n      assign(\n        target.gl_Position,\n        mul(projectionMatrix, mul(modelViewMatrix, vec4(pos1, 1.0)))\n      ),\n    ]),\n  ]);\n};\n\nexport const linesFragmentShader = (target: GLSLTarget) => {\n  let vColor;\n  return program([\n    (vColor = input(\"vec3\", \"vColor\", { prec: \"highp\" })),\n    defMain(() => [assign(target.gl_FragColor, vec4(vColor, 1.0))]),\n  ]);\n};\n\nexport const particleLinesProgram = (): ProgramAst => {\n  return {\n    vertexShader: linesVertexShader,\n    fragmentShader: linesFragmentShader,\n  };\n};\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0CO,aAAM,oBAAoB,CAAC,WAAuB;AACvD,QAAM,mBAAmB,QAAQ,QAAQ;AACzC,QAAM,kBAAkB,QAAQ,QAAQ;AACxC,QAAM,aAAa,QAAQ,QAAQ;AACnC,QAAM,UAAU,QAAQ,aAAa;AACrC,QAAM,UAAU,QAAQ,aAAa;AAGrC,QAAM,WAAW,MAAM,QAAQ;AAC/B,QAAM,QAAQ,MAAM,QAAQ;AAC5B,QAAM,SAAS,OAAO,QAAQ;AAK9B,QAAM,SAAS,MAAM,SAAS;AAC9B,QAAM,UAAU,MAAM,IAAI,QAAQ;AAElC,QAAM,KAAK,IACT,IACE,KAAK,IAAI,SAAS,GAAG,cAAc,IAAI,SAAS,GAAG,eACnD;AAGJ,QAAM,aAAa,IAAI,QAAQ,SAAS;AACxC,QAAM,aAAa,IAAI,QAAQ,SAAS;AACxC,QAAM,YAAY,IAAI,IAAI,YAAY;AAKtC,QAAM,OAAO,GAAG;AAChB,QAAM,OAAO,GAAG;AAChB,QAAM,SAAS,KAAK,MAAM,IAAI,IAAI,MAAM;AACxC,QAAM,UAAU,IAAI,MAAM,IAAM;AAChC,QAAM,MAAM,IAAI,KAAK,YAAY;AAEjC,QAAM,MAAM,KAAK;AACjB,QAAM,YAAY,IAAI,QAAQ,MAAM;AACpC,QAAM,OAAO,IAAI,KAAK,IAAI,KAAK;AAE/B,SAAO,QAAQ;AAAA,IAEb;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IAEA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IAEA,QAAQ,MAAM;AAAA,MACZ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,OAAO,QAAQ;AAAA,MAEf,OACE,OAAO,aACP,IAAI,kBAAkB,IAAI,iBAAiB,KAAK,MAAM;AAAA;AAAA;AAAA;AAMvD,aAAM,sBAAsB,CAAC,WAAuB;AACzD,MAAI;AACJ,SAAO,QAAQ;AAAA,IACZ,SAAS,MAAM,QAAQ,UAAU,CAAE,MAAM;AAAA,IAC1C,QAAQ,MAAM,CAAC,OAAO,OAAO,cAAc,KAAK,QAAQ;AAAA;AAAA;AAIrD,aAAM,uBAAuB,MAAkB;AACpD,SAAO;AAAA,IACL,cAAc;AAAA,IACd,gBAAgB;AAAA;AAAA;",
  "names": []
}
