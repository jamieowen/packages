{
  "version": 3,
  "sources": ["/Users/jamieowen/Workspace/packages/packages/webgl/src/gpgpu-particles/read-constants.ts"],
  "sourcesContent": ["import {\n  uniform,\n  input,\n  assign,\n  sym,\n  sub,\n  texture,\n  $xyz,\n  $x,\n  $y,\n  $z,\n  $w,\n  Sym,\n  Term,\n  ifThen,\n  gt,\n  float,\n  Vec3Sym,\n  FloatSym,\n  Vec3Term,\n  add,\n  FloatTerm,\n  defn,\n  Vec4Term,\n  vec3,\n  mul,\n  ret,\n  TaggedFn1,\n} from \"@thi.ng/shader-ast\";\nimport { curlNoise3, snoiseVec3 } from \"@thi.ng/shader-ast-stdlib\";\n\n/**\n * Given a basic 'constants' texture ( RGBA ), and presuming\n * that r & g are mass and decay. the other two\n */\nexport const readConstants = (v_Uv: Sym<\"vec2\">) => {\n  // Decl\n  const u_constants = uniform(\"sampler2D\", \"constants\");\n\n  // Main\n  const con = sym(texture(u_constants, v_Uv));\n  const mass = sym($x(con));\n  const decay = sym($y(con));\n  const opt1 = sym($z(con));\n  const opt2 = sym($w(con));\n\n  return {\n    decl: ([u_constants] as [Sym<\"sampler2D\">]) as [input: Sym<\"sampler2D\">],\n    main: [con, mass, decay, opt1, opt2] as [\n      constants: Sym<\"vec4\">,\n      mass: Sym<\"float\">,\n      decay: Sym<\"float\">,\n      opt1: Sym<\"float\">,\n      opt2: Sym<\"float\">\n    ],\n  };\n};\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmCO,aAAM,gBAAgB,CAAC,SAAsB;AAElD,QAAM,cAAc,QAAQ,aAAa;AAGzC,QAAM,MAAM,IAAI,QAAQ,aAAa;AACrC,QAAM,OAAO,IAAI,GAAG;AACpB,QAAM,QAAQ,IAAI,GAAG;AACrB,QAAM,OAAO,IAAI,GAAG;AACpB,QAAM,OAAO,IAAI,GAAG;AAEpB,SAAO;AAAA,IACL,MAAO,CAAC;AAAA,IACR,MAAM,CAAC,KAAK,MAAM,OAAO,MAAM;AAAA;AAAA;",
  "names": []
}
