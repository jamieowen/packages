{
  "version": 3,
  "sources": ["/Users/jamieowen/Workspace/packages/packages/webgl/src/gpgpu/state-setup.ts"],
  "sourcesContent": ["import { program, Scope } from \"@thi.ng/shader-ast\";\nimport { GLSLTarget, GLSLVersion, targetGLSL } from \"@thi.ng/shader-ast-glsl\";\nimport {\n  gpgpuQuadVertexShader,\n  gpgpuTriangleVertexShader,\n  gpgpuWriteOperation,\n} from \"../shaders/full-screen-read\";\n\nexport interface GPGPUSetupOpts {\n  geomType: \"triangle\" | \"quad\";\n  width: number;\n  height: number;\n  count: number; // num states\n  updateProgram: (target: GLSLTarget) => ReturnType<typeof program>;\n}\n\nexport interface GPGPUSetup {\n  opts: GPGPUSetupOpts;\n  data: Float32Array;\n  position: Float32Array;\n  vertexShader: string;\n  fragmentShader: String;\n}\n\nexport const gpgpuSetup = (opts: GPGPUSetupOpts) => {\n  const { width, height, count, geomType, updateProgram } = opts;\n\n  const targetVS = targetGLSL({\n    version: GLSLVersion.GLES_100,\n    versionPragma: false,\n    type: \"vs\",\n  });\n\n  const targetFS = targetGLSL({\n    version: GLSLVersion.GLES_100,\n    versionPragma: false,\n    type: \"fs\",\n    prelude: \"precision highp float;\",\n  });\n\n  let vertexAst: Scope;\n  let positionBuffer: Float32Array;\n\n  /**\n   * Determine which vertex shader to use\n   * for determining read uv from geometry.\n   */\n  if (geomType === \"quad\") {\n    vertexAst = gpgpuQuadVertexShader(targetVS);\n    // prettier-ignore\n    positionBuffer = new Float32Array([ -0.5, 0.5, 0, 0.5, 0.5, 0, -0.5, -0.5, 0, 0.5, -0.5, 0 ]);\n  } else {\n    vertexAst = gpgpuTriangleVertexShader(targetVS);\n    positionBuffer = new Float32Array([-1, -1, 0, -1, 4, 0, 4, -1, 0]);\n  }\n\n  const fragmentAst = updateProgram(targetFS);\n  const vertexSource = targetVS(vertexAst);\n  const fragmentSource = targetFS(fragmentAst);\n  // An additional source for raw state writes.\n  const fragmentWriteSource = targetFS(gpgpuWriteOperation(targetFS));\n\n  return {\n    geomType,\n    count,\n    vertexAst,\n    fragmentAst,\n    vertexSource,\n    fragmentSource,\n    fragmentWriteSource,\n    positionBuffer,\n    width,\n    height,\n  };\n};\n"],
  "mappings": "AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAsBO,aAAM,aAAa,CAAC,SAAyB;AAClD,QAAM,CAAE,OAAO,QAAQ,OAAO,UAAU,iBAAkB;AAE1D,QAAM,WAAW,WAAW;AAAA,IAC1B,SAAS,YAAY;AAAA,IACrB,eAAe;AAAA,IACf,MAAM;AAAA;AAGR,QAAM,WAAW,WAAW;AAAA,IAC1B,SAAS,YAAY;AAAA,IACrB,eAAe;AAAA,IACf,MAAM;AAAA,IACN,SAAS;AAAA;AAGX,MAAI;AACJ,MAAI;AAMJ,MAAI,aAAa,QAAQ;AACvB,gBAAY,sBAAsB;AAElC,qBAAiB,IAAI,aAAa,CAAE,MAAM,KAAK,GAAG,KAAK,KAAK,GAAG,MAAM,MAAM,GAAG,KAAK,MAAM;AAAA,SACpF;AACL,gBAAY,0BAA0B;AACtC,qBAAiB,IAAI,aAAa,CAAC,IAAI,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI;AAAA;AAGjE,QAAM,cAAc,cAAc;AAClC,QAAM,eAAe,SAAS;AAC9B,QAAM,iBAAiB,SAAS;AAEhC,QAAM,sBAAsB,SAAS,oBAAoB;AAEzD,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA;",
  "names": []
}
