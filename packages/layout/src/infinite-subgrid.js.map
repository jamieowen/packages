{
  "version": 3,
  "sources": ["/Users/jamieowen/Workspace/packages/packages/layout/src/infinite-subgrid.ts"],
  "sourcesContent": ["import { ISubscribable, sync } from \"@thi.ng/rstream\";\nimport { comp, iterator, map } from \"@thi.ng/transducers\";\nimport { ChangeMap } from \"./change-map\";\nimport { szudzikPairSigned } from \"./pairing-functions\";\nimport { SubGridCell, SubGridOpts } from \"./grid-types\";\nimport { subdivRange2dIterator, mapSubdivideIf } from \"./grid-rfn\";\n\n/**\n *\n * Return an infinite grid iterator given a start position,\n * grid cell and viewport dimensions.\n *\n * @param position\n * @param opts\n */\nexport const infiniteSubGridIterator = (\n  position: [number, number],\n  opts: SubGridOpts\n) => {\n  const [gw, gh] = opts.dimensions;\n  const [vw, vh] = opts.viewport;\n\n  const px = -position[0];\n  const py = -position[1];\n\n  // start cell x/y\n  const fromX = Math.floor(px / gw);\n  const fromY = Math.floor(py / gh);\n\n  // cell row / cols\n  const xCount = Math.ceil(vw / gw) + 1;\n  const yCount = Math.ceil(vh / gh) + 1;\n\n  const toX = fromX + xCount;\n  const toY = fromY + yCount;\n\n  const { maxDepth = 1, subdivide = () => true } = opts;\n  const subdivScale = Math.pow(4, maxDepth);\n  const idGen = (x: number, y: number) =>\n    szudzikPairSigned(x * subdivScale, y * subdivScale);\n\n  // todo: ? unroll loops to a number of depths?\n  const compDivide = [];\n  for (let i = 0; i < maxDepth; i++) {\n    compDivide.push(mapSubdivideIf(idGen, subdivide));\n  }\n\n  return iterator(\n    comp(\n      comp.apply(comp, compDivide),\n      map(([id, x, y, step, depth]) => {\n        const wx = x * gw;\n        const wy = y * gh;\n        return {\n          id,\n          cell: [x, y],\n          world: [wx, wy],\n          local: [wx - px, wy - py],\n          depth,\n          step,\n        } as SubGridCell;\n      })\n    ),\n    subdivRange2dIterator(fromX, toX, fromY, toY, 1, 0, idGen)\n  );\n};\n\n/**\n * Creates a reactive infinite grid with\n * @param position\n * @param opts\n */\nexport function infiniteSubGrid<T = any>(\n  position: ISubscribable<[number, number]>,\n  opts: ISubscribable<SubGridOpts>,\n  handle?: {\n    add: (cell: SubGridCell) => T;\n    remove: (id: number, handler: T) => void;\n    update: (cell: SubGridCell, handler: T) => void;\n  }\n) {\n  const changeMap = new ChangeMap<number, T>();\n  if (!handle) {\n    handle = {\n      add: () => null,\n      remove: () => {},\n      update: () => {},\n    };\n  }\n  let res = [];\n  return sync({\n    src: {\n      position,\n      opts,\n    },\n    xform: map(({ opts, position }) => {\n      const gridIterator = infiniteSubGridIterator(position, opts);\n      res.splice(0);\n      for (let cell of gridIterator) {\n        const handler = changeMap.set(cell.id, () => handle.add(cell));\n        handle.update(cell, handler);\n        res.push(cell);\n      }\n      changeMap.next((id, val) => handle.remove(id, val));\n      return res;\n    }),\n  });\n}\n"],
  "mappings": "AAAA;AACA;AACA;AACA;AAEA;AAUO,aAAM,0BAA0B,CACrC,UACA,SACG;AACH,QAAM,CAAC,IAAI,MAAM,KAAK;AACtB,QAAM,CAAC,IAAI,MAAM,KAAK;AAEtB,QAAM,KAAK,CAAC,SAAS;AACrB,QAAM,KAAK,CAAC,SAAS;AAGrB,QAAM,QAAQ,KAAK,MAAM,KAAK;AAC9B,QAAM,QAAQ,KAAK,MAAM,KAAK;AAG9B,QAAM,SAAS,KAAK,KAAK,KAAK,MAAM;AACpC,QAAM,SAAS,KAAK,KAAK,KAAK,MAAM;AAEpC,QAAM,MAAM,QAAQ;AACpB,QAAM,MAAM,QAAQ;AAEpB,QAAM,CAAE,WAAW,GAAG,YAAY,MAAM,QAAS;AACjD,QAAM,cAAc,KAAK,IAAI,GAAG;AAChC,QAAM,QAAQ,CAAC,GAAW,MACxB,kBAAkB,IAAI,aAAa,IAAI;AAGzC,QAAM,aAAa;AACnB,WAAS,IAAI,GAAG,IAAI,UAAU,KAAK;AACjC,eAAW,KAAK,eAAe,OAAO;AAAA;AAGxC,SAAO,SACL,KACE,KAAK,MAAM,MAAM,aACjB,IAAI,CAAC,CAAC,IAAI,GAAG,GAAG,MAAM,WAAW;AAC/B,UAAM,KAAK,IAAI;AACf,UAAM,KAAK,IAAI;AACf,WAAO;AAAA,MACL;AAAA,MACA,MAAM,CAAC,GAAG;AAAA,MACV,OAAO,CAAC,IAAI;AAAA,MACZ,OAAO,CAAC,KAAK,IAAI,KAAK;AAAA,MACtB;AAAA,MACA;AAAA;AAAA,OAIN,sBAAsB,OAAO,KAAK,OAAO,KAAK,GAAG,GAAG;AAAA;AASjD,gCACL,UACA,MACA,QAKA;AACA,QAAM,YAAY,IAAI;AACtB,MAAI,CAAC,QAAQ;AACX,aAAS;AAAA,MACP,KAAK,MAAM;AAAA,MACX,QAAQ,MAAM;AAAA;AAAA,MACd,QAAQ,MAAM;AAAA;AAAA;AAAA;AAGlB,MAAI,MAAM;AACV,SAAO,KAAK;AAAA,IACV,KAAK;AAAA,MACH;AAAA,MACA;AAAA;AAAA,IAEF,OAAO,IAAI,CAAC,CAAE,aAAM,yBAAe;AACjC,YAAM,eAAe,wBAAwB,WAAU;AACvD,UAAI,OAAO;AACX,eAAS,QAAQ,cAAc;AAC7B,cAAM,UAAU,UAAU,IAAI,KAAK,IAAI,MAAM,OAAO,IAAI;AACxD,eAAO,OAAO,MAAM;AACpB,YAAI,KAAK;AAAA;AAEX,gBAAU,KAAK,CAAC,IAAI,QAAQ,OAAO,OAAO,IAAI;AAC9C,aAAO;AAAA;AAAA;AAAA;",
  "names": []
}
