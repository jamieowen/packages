{
  "version": 3,
  "sources": ["/Users/jamieowen/Workspace/packages/packages/browser/src/timer-stream.ts"],
  "sourcesContent": ["import { Stream } from \"@thi.ng/rstream\";\nimport { IRandom, SYSTEM } from \"@thi.ng/random\";\n\ninterface TimerEvent {\n  time: number;\n  delta: number;\n  next: number;\n  last: boolean;\n}\n\ntype FrequencyFn = () => number;\n\ninterface TimerStreamParams {\n  repeat?: number;\n  frequency?: number | FrequencyFn;\n  autoStart?: boolean;\n}\n\nexport class TimerStream extends Stream<TimerEvent> {\n  getFrequency: FrequencyFn;\n  intervalID: number;\n  running: boolean = false;\n  repeat: number = Infinity;\n  count: number = 0;\n  currentTime: number;\n\n  constructor(params: TimerStreamParams) {\n    super({});\n    const { repeat = Infinity, frequency = 100, autoStart = true } = params;\n    this.repeat = repeat;\n    if (typeof frequency === \"function\") {\n      this.getFrequency = frequency;\n    } else {\n      this.getFrequency = () => frequency;\n    }\n    if (autoStart) {\n      this.start();\n    }\n  }\n\n  start() {\n    if (!this.running) {\n      this.running = true;\n      this.count = 0;\n      this.currentTime = 0;\n      this.tick(0, this.getFrequency(), false);\n    }\n  }\n\n  stop() {\n    if (this.running) {\n      clearTimeout(this.intervalID);\n      this.running = false;\n    }\n  }\n\n  // TODO : Check repeat count, currently a couple more inc;iding start event.\n  private tick(delta: number, next: number, last: boolean) {\n    this.next({\n      time: this.currentTime,\n      delta,\n      next,\n      last,\n    });\n    if (last) {\n      this.stop();\n    } else {\n      this.intervalID = setTimeout(() => {\n        this.count++;\n        this.currentTime += next;\n        const last = this.count > this.repeat;\n        const nextTime = last ? 0 : this.getFrequency();\n        this.tick(next, nextTime, last);\n      }, next) as any;\n    }\n  }\n}\n\nexport const timerStream = (params: TimerStreamParams) =>\n  new TimerStream(params);\n\nexport const timerStreamRandomFrequency = (\n  params: {\n    min?: number;\n    max?: number;\n    step?: number;\n    rand?: IRandom;\n  } = {}\n): FrequencyFn => {\n  const { min = 100, max = 300, step = 50, rand = SYSTEM } = params;\n  return () => {\n    const time = rand.minmax(min, max);\n    return Math.round(time / step) * step;\n  };\n};\n"],
  "mappings": "AAAA;AACA;AAiBO,iCAA0B,OAAmB;AAAA,EAQlD,YAAY,QAA2B;AACrC,UAAM;AANR,mBAAmB;AACnB,kBAAiB;AACjB,iBAAgB;AAKd,UAAM,CAAE,SAAS,UAAU,YAAY,KAAK,YAAY,QAAS;AACjE,SAAK,SAAS;AACd,QAAI,OAAO,cAAc,YAAY;AACnC,WAAK,eAAe;AAAA,WACf;AACL,WAAK,eAAe,MAAM;AAAA;AAE5B,QAAI,WAAW;AACb,WAAK;AAAA;AAAA;AAAA,EAIT,QAAQ;AACN,QAAI,CAAC,KAAK,SAAS;AACjB,WAAK,UAAU;AACf,WAAK,QAAQ;AACb,WAAK,cAAc;AACnB,WAAK,KAAK,GAAG,KAAK,gBAAgB;AAAA;AAAA;AAAA,EAItC,OAAO;AACL,QAAI,KAAK,SAAS;AAChB,mBAAa,KAAK;AAClB,WAAK,UAAU;AAAA;AAAA;AAAA,EAKX,KAAK,OAAe,MAAc,MAAe;AACvD,SAAK,KAAK;AAAA,MACR,MAAM,KAAK;AAAA,MACX;AAAA,MACA;AAAA,MACA;AAAA;AAEF,QAAI,MAAM;AACR,WAAK;AAAA,WACA;AACL,WAAK,aAAa,WAAW,MAAM;AACjC,aAAK;AACL,aAAK,eAAe;AACpB,cAAM,QAAO,KAAK,QAAQ,KAAK;AAC/B,cAAM,WAAW,QAAO,IAAI,KAAK;AACjC,aAAK,KAAK,MAAM,UAAU;AAAA,SACzB;AAAA;AAAA;AAAA;AAKF,aAAM,cAAc,CAAC,WAC1B,IAAI,YAAY;AAEX,aAAM,6BAA6B,CACxC,SAKI,OACY;AAChB,QAAM,CAAE,MAAM,KAAK,MAAM,KAAK,OAAO,IAAI,OAAO,UAAW;AAC3D,SAAO,MAAM;AACX,UAAM,OAAO,KAAK,OAAO,KAAK;AAC9B,WAAO,KAAK,MAAM,OAAO,QAAQ;AAAA;AAAA;",
  "names": []
}
