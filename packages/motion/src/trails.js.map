{
  "version": 3,
  "sources": ["/Users/jamieowen/Workspace/packages/packages/motion/src/trails.ts"],
  "sourcesContent": ["import { subscription, Subscription } from \"@thi.ng/rstream\";\nimport { set, set3 } from \"@thi.ng/vectors\";\n\nimport { IMotionEvent, ITransform, IParticle } from \"./api\";\nimport {\n  comp,\n  map,\n  sideEffect,\n  Transducer,\n  iterator,\n} from \"@thi.ng/transducers\";\nimport { createParticle, createTransform } from \"./base-streams\";\n\n// export class Trails extends Subscription<\n//   IMotionEvent<\"transform\">,\n//   IMotionEvent<\"transform-array\">\n// > {\n//   trails: ITransform[] = [];\n//   emit: boolean = false;\n\n//   constructor(public length: number, public emitWhenFull: boolean = true) {\n//     super(undefined, {\n//       xform: sideEffect(() => console.log(\"trail\")),\n//     });\n//     this.trails = [];\n//   }\n\n//   next(ev: IMotionEvent<\"transform\">) {\n//     if (this.trails.length < this.length) {\n//       this.trails.unshift(createTransform());\n//     } else {\n//       const last = this.trails.pop();\n//       this.trails.unshift(last);\n//     }\n//     const input = ev.data;\n//     const transform = this.trails[0];\n\n//     set3(transform.position, input.position);\n\n//     if (this.emitWhenFull && this.trails.length >= this.length) {\n//       this.dispatch({\n//         type: \"transform-array\",\n//         data: this.trails,\n//         clock: ev.clock,\n//       });\n//     } else {\n//     }\n//   }\n\n//   error(err: Error) {\n//     console.log(\"Err\", err);\n//   }\n// }\n\n// export const trails = (length: number) => new Trails(length);\n\n/**\n *\n * Trails 2\n *\n */\n\nconst pushHistory = (length: number) => {\n  const history: IParticle[] = [];\n  return (ev: IMotionEvent<\"particle\">): IMotionEvent<\"particle-array\"> => {\n    if (history.length < length) {\n      history.unshift(createParticle());\n    } else {\n      const last = history.pop();\n      history.unshift(last);\n    }\n    const input = ev.data;\n    const transform = history[0];\n\n    set3(transform.position, input.position);\n\n    return {\n      ...ev,\n      type: \"particle-array\",\n      data: history,\n    };\n  };\n};\n\nexport const particleTrails = <I, O>(length: number) => {\n  const xform = map(pushHistory(length));\n  return subscription(\n    {\n      next: () => {},\n      error: (err) => {\n        throw err;\n      },\n    },\n    { xform }\n  );\n};\n"],
  "mappings": "AAAA;AACA;AAGA;AAAA;AAAA;AAOA;AAmDA,MAAM,cAAc,CAAC,WAAmB;AACtC,QAAM,UAAuB;AAC7B,SAAO,CAAC,OAAiE;AACvE,QAAI,QAAQ,SAAS,QAAQ;AAC3B,cAAQ,QAAQ;AAAA,WACX;AACL,YAAM,OAAO,QAAQ;AACrB,cAAQ,QAAQ;AAAA;AAElB,UAAM,QAAQ,GAAG;AACjB,UAAM,YAAY,QAAQ;AAE1B,SAAK,UAAU,UAAU,MAAM;AAE/B,WAAO;AAAA,SACF;AAAA,MACH,MAAM;AAAA,MACN,MAAM;AAAA;AAAA;AAAA;AAKL,aAAM,iBAAiB,CAAO,WAAmB;AACtD,QAAM,QAAQ,IAAI,YAAY;AAC9B,SAAO,aACL;AAAA,IACE,MAAM,MAAM;AAAA;AAAA,IACZ,OAAO,CAAC,QAAQ;AACd,YAAM;AAAA;AAAA,KAGV,CAAE;AAAA;",
  "names": []
}
