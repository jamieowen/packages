{
  "version": 3,
  "sources": ["/Users/jamieowen/Workspace/packages/packages/three/src/factory-fn/mesh-factory.ts"],
  "sourcesContent": ["import { createGeometryFactory } from \"./geometries\";\nimport { GeometryAlignment, GeometryFactory } from \"../geometry\";\nimport {\n  Mesh,\n  BufferGeometry,\n  MeshBasicMaterial,\n  MeshStandardMaterial,\n  MeshBasicMaterialParameters,\n  MeshStandardMaterialParameters,\n  Object3D,\n  Vector3,\n  MeshLambertMaterial,\n  MeshPhongMaterial,\n  MeshPhongMaterialParameters,\n  MeshLambertMaterialParameters,\n} from \"three\";\n\ntype MaterialParamType =\n  | MeshBasicMaterialParameters\n  | MeshStandardMaterialParameters;\n\ntype MaterialClass<T> = new (...args: any[]) => T;\n\ntype MaterialClassType =\n  | MaterialClass<MeshBasicMaterial>\n  | MaterialClass<MeshStandardMaterial>;\n\nexport class MeshFactory {\n  nextMaterialParams: MaterialParamType;\n  nextMaterialClass: MaterialClassType;\n  nextGeometry: BufferGeometry;\n  geometryFactory: GeometryFactory = createGeometryFactory();\n  scale: Vector3 = new Vector3(1, 1, 1);\n\n  constructor() {\n    this.setMaterial(\n      {\n        color: \"white\",\n      },\n      MeshBasicMaterial\n    );\n    this.sphere();\n  }\n\n  setGeometry(geometry: BufferGeometry) {\n    this.nextGeometry = geometry;\n  }\n\n  plane(align?: GeometryAlignment) {\n    this.setGeometry(this.geometryFactory.create(\"plane\", align));\n  }\n\n  sphere(align?: GeometryAlignment) {\n    this.setGeometry(this.geometryFactory.create(\"sphere\", align));\n  }\n\n  box(align?: GeometryAlignment) {\n    this.setGeometry(this.geometryFactory.create(\"box\", align));\n  }\n\n  setMaterial(params: MaterialParamType, cls: MaterialClassType) {\n    this.nextMaterialParams = params;\n    this.nextMaterialClass = cls;\n  }\n\n  basicMaterial(params: MeshBasicMaterialParameters) {\n    this.setMaterial(params, MeshBasicMaterial);\n  }\n\n  lambertMaterial(params: MeshLambertMaterialParameters) {\n    this.setMaterial(params, MeshLambertMaterial);\n  }\n\n  phongMaterial(params: MeshPhongMaterialParameters) {\n    this.setMaterial(params, MeshPhongMaterial);\n  }\n\n  standardMaterial(params: MeshStandardMaterialParameters) {\n    this.setMaterial(params, MeshStandardMaterial);\n  }\n\n  mesh(parent?: Object3D) {\n    const mesh = new Mesh(\n      this.nextGeometry,\n      new this.nextMaterialClass(this.nextMaterialParams)\n    );\n    if (parent) {\n      parent.add(mesh);\n    }\n    mesh.scale.copy(this.scale);\n    return mesh;\n  }\n}\n\nexport const createMeshFactory = () => {\n  return new MeshFactory();\n};\n"],
  "mappings": "AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAyBO,yBAAkB;AAAA,EAOvB,cAAc;AAHd,2BAAmC;AACnC,iBAAiB,IAAI,QAAQ,GAAG,GAAG;AAGjC,SAAK,YACH;AAAA,MACE,OAAO;AAAA,OAET;AAEF,SAAK;AAAA;AAAA,EAGP,YAAY,UAA0B;AACpC,SAAK,eAAe;AAAA;AAAA,EAGtB,MAAM,OAA2B;AAC/B,SAAK,YAAY,KAAK,gBAAgB,OAAO,SAAS;AAAA;AAAA,EAGxD,OAAO,OAA2B;AAChC,SAAK,YAAY,KAAK,gBAAgB,OAAO,UAAU;AAAA;AAAA,EAGzD,IAAI,OAA2B;AAC7B,SAAK,YAAY,KAAK,gBAAgB,OAAO,OAAO;AAAA;AAAA,EAGtD,YAAY,QAA2B,KAAwB;AAC7D,SAAK,qBAAqB;AAC1B,SAAK,oBAAoB;AAAA;AAAA,EAG3B,cAAc,QAAqC;AACjD,SAAK,YAAY,QAAQ;AAAA;AAAA,EAG3B,gBAAgB,QAAuC;AACrD,SAAK,YAAY,QAAQ;AAAA;AAAA,EAG3B,cAAc,QAAqC;AACjD,SAAK,YAAY,QAAQ;AAAA;AAAA,EAG3B,iBAAiB,QAAwC;AACvD,SAAK,YAAY,QAAQ;AAAA;AAAA,EAG3B,KAAK,QAAmB;AACtB,UAAM,OAAO,IAAI,KACf,KAAK,cACL,IAAI,KAAK,kBAAkB,KAAK;AAElC,QAAI,QAAQ;AACV,aAAO,IAAI;AAAA;AAEb,SAAK,MAAM,KAAK,KAAK;AACrB,WAAO;AAAA;AAAA;AAIJ,aAAM,oBAAoB,MAAM;AACrC,SAAO,IAAI;AAAA;",
  "names": []
}
