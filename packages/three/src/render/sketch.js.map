{
  "version": 3,
  "sources": ["/Users/jamieowen/Workspace/packages/packages/three/src/render/sketch.ts"],
  "sourcesContent": ["import { Fn } from \"@thi.ng/api\";\nimport { PerspectiveCamera, Scene } from \"three\";\nimport { rafClockStream } from \"../streams/raf-clock-stream\";\nimport { gestureStream3d } from \"../interaction\";\nimport { keyboardStream } from \"@jamieowen/browser\";\nimport { createRenderer } from \"../factory-fn/renderer\";\nimport { orbitControls } from \"../factory-fn/controls\";\n\ntype SketchConfigure = {\n  width: number | string;\n  height: number | string;\n};\n\ntype SketchSetup = ReturnType<typeof createRenderer> & {\n  scene: Scene;\n  camera: PerspectiveCamera;\n  render: Fn<FnSketchRender, void>;\n  configure: Fn<SketchConfigure, void>;\n  clock: ReturnType<typeof rafClockStream>;\n  controls: ReturnType<typeof orbitControls>;\n  gestures: ReturnType<typeof gestureStream3d>;\n  keyboard: ReturnType<typeof keyboardStream>;\n};\n\ntype SketchRender = {\n  delta: number;\n  time: number;\n  frame: number;\n};\n\ntype FnSketchSetup = Fn<SketchSetup, void>;\ntype FnSketchRender = Fn<SketchRender, boolean | void>;\n\nexport function createSketch(\n  setup: FnSketchSetup,\n  container?: HTMLElement\n): void {\n  const { domElement, renderer, resize } = createRenderer(container);\n  renderer.setPixelRatio(2);\n  const scene = new Scene();\n  const camera = new PerspectiveCamera(45);\n  camera.position.set(0, 2, 10);\n  camera.lookAt(0, 0, 0);\n  resize.subscribe({\n    next: ({ width, height }) => {\n      camera.aspect = width / height;\n      camera.updateProjectionMatrix();\n      renderer.setSize(width, height);\n    },\n  });\n  let userRender: FnSketchRender;\n  const render: Fn<FnSketchRender, void> = (render: FnSketchRender): void => {\n    userRender = render;\n  };\n  const clock = rafClockStream();\n  clock.subscribe({\n    next: ({ delta, frame, time }) => {\n      if (userRender) {\n        const autoRender = userRender({\n          delta,\n          frame,\n          time,\n        });\n\n        // Return false to prevent automatically rendering the default scene and camera\n        if (autoRender || autoRender === undefined) {\n          renderer.render(scene, camera);\n        }\n      }\n    },\n  });\n  const controls = orbitControls(camera, renderer.domElement);\n  controls.enabled = false;\n  const gestures = gestureStream3d(renderer.domElement, camera, resize);\n  const keyboard = keyboardStream({\n    listen: [\" \"],\n  });\n  keyboard.subscribe({\n    next: ({ isKeyDown, keysDown, keysToggled }) => {\n      controls.enabled = isKeyDown;\n    },\n  });\n\n  const configure = (config: Partial<SketchConfigure>) => {\n    // resize observer will trigger a renderer resize\n    domElement.style.width = config.width.toString();\n    domElement.style.height = config.height.toString();\n  };\n\n  domElement.style.touchAction = \"none\";\n\n  setup({\n    domElement,\n    renderer,\n    scene,\n    camera,\n    resize,\n    render,\n    clock,\n    configure,\n    controls,\n    gestures,\n    keyboard,\n  });\n}\n\nexport const sketch = createSketch;\n"],
  "mappings": "AACA;AACA;AACA;AACA;AACA;AACA;AA2BO,6BACL,OACA,WACM;AACN,QAAM,CAAE,YAAY,UAAU,UAAW,eAAe;AACxD,WAAS,cAAc;AACvB,QAAM,QAAQ,IAAI;AAClB,QAAM,SAAS,IAAI,kBAAkB;AACrC,SAAO,SAAS,IAAI,GAAG,GAAG;AAC1B,SAAO,OAAO,GAAG,GAAG;AACpB,SAAO,UAAU;AAAA,IACf,MAAM,CAAC,CAAE,OAAO,YAAa;AAC3B,aAAO,SAAS,QAAQ;AACxB,aAAO;AACP,eAAS,QAAQ,OAAO;AAAA;AAAA;AAG5B,MAAI;AACJ,QAAM,SAAmC,CAAC,YAAiC;AACzE,iBAAa;AAAA;AAEf,QAAM,QAAQ;AACd,QAAM,UAAU;AAAA,IACd,MAAM,CAAC,CAAE,OAAO,OAAO,UAAW;AAChC,UAAI,YAAY;AACd,cAAM,aAAa,WAAW;AAAA,UAC5B;AAAA,UACA;AAAA,UACA;AAAA;AAIF,YAAI,cAAc,eAAe,QAAW;AAC1C,mBAAS,OAAO,OAAO;AAAA;AAAA;AAAA;AAAA;AAK/B,QAAM,WAAW,cAAc,QAAQ,SAAS;AAChD,WAAS,UAAU;AACnB,QAAM,WAAW,gBAAgB,SAAS,YAAY,QAAQ;AAC9D,QAAM,WAAW,eAAe;AAAA,IAC9B,QAAQ,CAAC;AAAA;AAEX,WAAS,UAAU;AAAA,IACjB,MAAM,CAAC,CAAE,WAAW,UAAU,iBAAkB;AAC9C,eAAS,UAAU;AAAA;AAAA;AAIvB,QAAM,YAAY,CAAC,WAAqC;AAEtD,eAAW,MAAM,QAAQ,OAAO,MAAM;AACtC,eAAW,MAAM,SAAS,OAAO,OAAO;AAAA;AAG1C,aAAW,MAAM,cAAc;AAE/B,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA;AAIG,aAAM,SAAS;",
  "names": []
}
