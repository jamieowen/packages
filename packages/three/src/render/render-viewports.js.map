{
  "version": 3,
  "sources": ["/Users/jamieowen/Workspace/packages/packages/three/src/render/render-viewports.ts"],
  "sourcesContent": ["/**\n *\n * Helper functions for rendering various types\n * to rectangular regions of the viewport.\n *\n */\nimport {\n  WebGLRenderer,\n  Scene,\n  OrthographicCamera,\n  Texture,\n  Vector4,\n  MeshBasicMaterial,\n  Mesh,\n  PlaneBufferGeometry,\n  DoubleSide,\n  FrontSide,\n  BackSide,\n  BufferAttribute,\n} from \"three\";\nimport { range2d, map } from \"@thi.ng/transducers\";\n\n/**\n * Temp helper objects.\n */\nconst tmp = (() => {\n  const viewport = new Vector4();\n  const scene = new Scene();\n  const camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1);\n  const material = new MeshBasicMaterial({\n    color: \"white\",\n  });\n  const geometry = new PlaneBufferGeometry(2, 2);\n\n  const mesh = new Mesh(geometry, material);\n  mesh.frustumCulled = false;\n  scene.add(mesh);\n\n  return {\n    viewport,\n    scene,\n    camera,\n    material,\n    mesh,\n  };\n})();\n/**\n * Api\n */\ninterface RenderViewportRect {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\n/**\n *\n * Render to a single viewport rectangle.\n *\n * @param renderer\n * @param rect\n * @param render\n */\nexport const renderViewportRect = (\n  renderer: WebGLRenderer,\n  rect: RenderViewportRect,\n  render: (renderer: WebGLRenderer, rect: RenderViewportRect) => void\n) => {\n  renderViewportRects(renderer, [rect], render);\n};\n\n/**\n *\n * Render to multiple viewport rectangles.\n *\n * @param renderer\n * @param rects\n * @param render\n */\nexport const renderViewportRects = (\n  renderer: WebGLRenderer,\n  rects: RenderViewportRect[],\n  render: (renderer: WebGLRenderer, rect: RenderViewportRect) => void\n) => {\n  renderer.getViewport(tmp.viewport);\n  renderer.setScissorTest(true);\n\n  rects.forEach((rect) => {\n    renderer.setViewport(rect.x, rect.y, rect.width, rect.height);\n    renderer.setScissor(rect.x, rect.y, rect.width, rect.height);\n    renderer.clearDepth();\n    render(renderer, rect);\n  });\n\n  renderer.setViewport(tmp.viewport);\n  renderer.setScissorTest(false);\n};\n\n/**\n *\n * Render a texture to the given viewport Rect.\n *\n * @param renderer\n * @param opts\n */\nexport const renderViewportTexture = (\n  renderer: WebGLRenderer,\n  texture: Texture,\n  rect: RenderViewportRect\n) => {\n  tmp.material.map = texture;\n  renderViewportRect(renderer, rect, () => {\n    renderer.render(tmp.scene, tmp.camera);\n  });\n};\n\nexport const renderTextures = () => {};\n\ninterface RenderGridOpts {\n  grid: [number, number];\n  render: (i: number, xy: [number, number], wh: [number, number]) => void;\n}\n\n/**\n *\n * Render a number of regions in a grid.\n *\n * @param renderer\n * @param opts\n */\nexport const renderViewportGrid = (\n  renderer: WebGLRenderer,\n  opts: RenderGridOpts\n) => {\n  const [gx, gy] = opts.grid;\n  const { width, height } = renderer.getContext().canvas;\n  const pr = renderer.getPixelRatio();\n\n  const vw = width / pr / gx;\n  const vh = height / pr / gy;\n\n  renderer.setScissorTest(true);\n\n  [...range2d(gx, gy)].map(([x, y], i) => {\n    renderer.setScissor(vw * x, vh * y, vw, vh);\n    renderer.setViewport(vw * x, vh * y, vw, vh);\n    opts.render(i, [x, y], [vw, vh]);\n  });\n\n  renderer.setScissorTest(false);\n};\n"],
  "mappings": "AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAKA,MAAM,MAAO,OAAM;AACjB,QAAM,WAAW,IAAI;AACrB,QAAM,QAAQ,IAAI;AAClB,QAAM,SAAS,IAAI,mBAAmB,IAAI,GAAG,GAAG,IAAI,GAAG;AACvD,QAAM,WAAW,IAAI,kBAAkB;AAAA,IACrC,OAAO;AAAA;AAET,QAAM,WAAW,IAAI,oBAAoB,GAAG;AAE5C,QAAM,OAAO,IAAI,KAAK,UAAU;AAChC,OAAK,gBAAgB;AACrB,QAAM,IAAI;AAEV,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA;AAqBG,aAAM,qBAAqB,CAChC,UACA,MACA,WACG;AACH,sBAAoB,UAAU,CAAC,OAAO;AAAA;AAWjC,aAAM,sBAAsB,CACjC,UACA,OACA,WACG;AACH,WAAS,YAAY,IAAI;AACzB,WAAS,eAAe;AAExB,QAAM,QAAQ,CAAC,SAAS;AACtB,aAAS,YAAY,KAAK,GAAG,KAAK,GAAG,KAAK,OAAO,KAAK;AACtD,aAAS,WAAW,KAAK,GAAG,KAAK,GAAG,KAAK,OAAO,KAAK;AACrD,aAAS;AACT,WAAO,UAAU;AAAA;AAGnB,WAAS,YAAY,IAAI;AACzB,WAAS,eAAe;AAAA;AAUnB,aAAM,wBAAwB,CACnC,UACA,SACA,SACG;AACH,MAAI,SAAS,MAAM;AACnB,qBAAmB,UAAU,MAAM,MAAM;AACvC,aAAS,OAAO,IAAI,OAAO,IAAI;AAAA;AAAA;AAI5B,aAAM,iBAAiB,MAAM;AAAA;AAc7B,aAAM,qBAAqB,CAChC,UACA,SACG;AACH,QAAM,CAAC,IAAI,MAAM,KAAK;AACtB,QAAM,CAAE,OAAO,UAAW,SAAS,aAAa;AAChD,QAAM,KAAK,SAAS;AAEpB,QAAM,KAAK,QAAQ,KAAK;AACxB,QAAM,KAAK,SAAS,KAAK;AAEzB,WAAS,eAAe;AAExB,GAAC,GAAG,QAAQ,IAAI,KAAK,IAAI,CAAC,CAAC,GAAG,IAAI,MAAM;AACtC,aAAS,WAAW,KAAK,GAAG,KAAK,GAAG,IAAI;AACxC,aAAS,YAAY,KAAK,GAAG,KAAK,GAAG,IAAI;AACzC,SAAK,OAAO,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI;AAAA;AAG9B,WAAS,eAAe;AAAA;",
  "names": []
}
