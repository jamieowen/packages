{
  "version": 3,
  "sources": ["/Users/jamieowen/Workspace/packages/packages/three/src/gpgpu/particle-state-points.ts"],
  "sourcesContent": ["import {\n  BufferAttribute,\n  BufferGeometry,\n  Points,\n  RawShaderMaterial,\n  Vector2,\n} from \"three\";\nimport { compileProgramAst, particlePointsProgram } from \"@jamieowen/webgl\";\nimport { GPGPUState } from \"../gpgpu\";\n\nconst particleStatePointsMaterial = (addColor: boolean) => {\n  const { fragmentSource, vertexSource } = compileProgramAst(\n    particlePointsProgram()\n  );\n  const material = new RawShaderMaterial({\n    vertexShader: vertexSource,\n    fragmentShader: fragmentSource,\n  });\n  material.uniforms[\"state_1\"] = { value: null };\n  material.uniforms[\"point_size\"] = { value: 5.0 };\n  material.uniforms[\"resolution\"] = { value: new Vector2() };\n  return material;\n};\n\n/**\n *\n * Particle State.\n * Points Geometry.\n *\n */\nconst particleStatePointsGeometry = (count: number, color: BufferAttribute) => {\n  const geometry = new BufferGeometry();\n  const position = new BufferAttribute(new Float32Array(count * 3).fill(0), 3);\n\n  const offset = new BufferAttribute(\n    new Float32Array(new Array(count).fill(0).map((_v, i) => i)),\n    1\n  );\n  geometry.setAttribute(\"position\", position);\n  geometry.setAttribute(\"offset\", offset);\n\n  if (color) {\n    geometry.setAttribute(\"color\", color);\n  }\n\n  return geometry;\n};\n\n/**\n *\n * Particle State.\n * Points Rendering.\n *\n */\nexport class ParticleStatePoints extends Points {\n  state: GPGPUState;\n  constructor(count: number, state: GPGPUState, color: BufferAttribute) {\n    super(\n      particleStatePointsGeometry(count, color),\n      particleStatePointsMaterial(null)\n    );\n    this.state = state;\n  }\n  onBeforeRender = () => {\n    const material = this.material as RawShaderMaterial;\n    material.uniforms.state_1.value = this.state.preview.texture;\n    material.uniforms.resolution.value.x = this.state.setup.width;\n    material.uniforms.resolution.value.y = this.state.setup.height;\n  };\n}\n\nexport const createParticleStatePoints = (\n  count: number,\n  state: GPGPUState,\n  color: BufferAttribute\n) => {\n  return new ParticleStatePoints(count, state, color);\n};\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAGA,MAAM,8BAA8B,CAAC,aAAsB;AACzD,QAAM,CAAE,gBAAgB,gBAAiB,kBACvC;AAEF,QAAM,WAAW,IAAI,kBAAkB;AAAA,IACrC,cAAc;AAAA,IACd,gBAAgB;AAAA;AAElB,WAAS,SAAS,aAAa,CAAE,OAAO;AACxC,WAAS,SAAS,gBAAgB,CAAE,OAAO;AAC3C,WAAS,SAAS,gBAAgB,CAAE,OAAO,IAAI;AAC/C,SAAO;AAAA;AAST,MAAM,8BAA8B,CAAC,OAAe,UAA2B;AAC7E,QAAM,WAAW,IAAI;AACrB,QAAM,WAAW,IAAI,gBAAgB,IAAI,aAAa,QAAQ,GAAG,KAAK,IAAI;AAE1E,QAAM,SAAS,IAAI,gBACjB,IAAI,aAAa,IAAI,MAAM,OAAO,KAAK,GAAG,IAAI,CAAC,IAAI,MAAM,KACzD;AAEF,WAAS,aAAa,YAAY;AAClC,WAAS,aAAa,UAAU;AAEhC,MAAI,OAAO;AACT,aAAS,aAAa,SAAS;AAAA;AAGjC,SAAO;AAAA;AASF,yCAAkC,OAAO;AAAA,EAE9C,YAAY,OAAe,OAAmB,OAAwB;AACpE,UACE,4BAA4B,OAAO,QACnC,4BAA4B;AAIhC,0BAAiB,MAAM;AACrB,YAAM,WAAW,KAAK;AACtB,eAAS,SAAS,QAAQ,QAAQ,KAAK,MAAM,QAAQ;AACrD,eAAS,SAAS,WAAW,MAAM,IAAI,KAAK,MAAM,MAAM;AACxD,eAAS,SAAS,WAAW,MAAM,IAAI,KAAK,MAAM,MAAM;AAAA;AANxD,SAAK,QAAQ;AAAA;AAAA;AAUV,aAAM,4BAA4B,CACvC,OACA,OACA,UACG;AACH,SAAO,IAAI,oBAAoB,OAAO,OAAO;AAAA;",
  "names": []
}
