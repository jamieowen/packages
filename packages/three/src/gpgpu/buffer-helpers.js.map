{
  "version": 3,
  "sources": ["/Users/jamieowen/Workspace/packages/packages/three/src/gpgpu/buffer-helpers.ts"],
  "sourcesContent": ["import {\n  DataTexture,\n  FloatType,\n  LuminanceAlphaFormat,\n  PixelFormat,\n  RGBAFormat,\n  RGBFormat,\n  UVMapping,\n  ClampToEdgeWrapping,\n  NearestFilter,\n  RedFormat,\n} from \"three\";\nimport { IRandom, SYSTEM } from \"@thi.ng/random\";\n\nexport const randomFloat32Array3 = (\n  count: number,\n  minmax: [number, number] = [0, 1],\n  rng: IRandom = SYSTEM\n) => {\n  const array = new Float32Array(count * 3);\n  let offset = 0;\n  for (let i = 0; i < array.length; i += 3) {\n    array[offset] = rng.minmax(minmax[0], minmax[1]);\n    array[offset + 1] = 0;\n    array[offset + 2] = 0;\n    offset += 3;\n  }\n  return array;\n};\n\nexport const randomFloat32Array2 = (count: number) => {\n  const array = new Float32Array(count * 2);\n  let offset = 0;\n  for (let i = 0; i < array.length; i += 2) {\n    array[offset] = 0;\n    array[offset + 1] = 0;\n    offset += 2;\n  }\n  return array;\n};\n\nexport const randomFloat32Array1 = (\n  count: number,\n  minmax: [number, number] = [0, 1],\n  rng: IRandom = SYSTEM\n) => {\n  const array = new Float32Array(count);\n  for (let i = 0; i < array.length; i++) {\n    array[i] = rng.minmax(minmax[0], minmax[1]);\n  }\n  return array;\n};\n\nexport const dataTexture = (\n  data: Float32Array,\n  width: number,\n  height: number,\n  size: number = 3\n) => {\n  let format: PixelFormat;\n  if (size === 1) {\n    format = RedFormat;\n  } else if (size === 2) {\n    format = LuminanceAlphaFormat;\n  } else if (size === 3) {\n    format = RGBFormat;\n  } else if (size === 4) {\n    format = RGBAFormat;\n  }\n  return new DataTexture(\n    data,\n    width,\n    height,\n    format,\n    FloatType,\n    UVMapping,\n    ClampToEdgeWrapping,\n    ClampToEdgeWrapping,\n    NearestFilter,\n    NearestFilter\n  );\n};\n\nexport const encodeFillFloat32Array3 = (\n  count: number,\n  fill: (array: Float32Array, offset: number) => void\n) => {\n  const array = new Float32Array(count * 3);\n  let offset = 0;\n  for (let i = 0; i < array.length; i += 3) {\n    fill(array, offset);\n    offset += 3;\n  }\n  return array;\n};\n\nexport const encodeFillDataTexture3 = (\n  width: number,\n  height: number,\n  fill: (array: Float32Array, offset: number) => void\n) => {\n  const array = encodeFillFloat32Array3(width * height, fill);\n  return dataTexture(array, width, height, 3);\n};\n\nexport const encodeFillFloat32Array4 = (\n  count: number,\n  fill: (array: Float32Array, offset: number) => void\n) => {\n  const array = new Float32Array(count * 4);\n  let offset = 0;\n  for (let i = 0; i < array.length; i += 4) {\n    fill(array, offset);\n    offset += 4;\n  }\n  return array;\n};\n\nexport const encodeFillDataTexture4 = (\n  width: number,\n  height: number,\n  fill: (array: Float32Array, offset: number) => void\n) => {\n  const array = encodeFillFloat32Array4(width * height, fill);\n  return dataTexture(array, width, height, 4);\n};\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAEO,aAAM,sBAAsB,CACjC,OACA,SAA2B,CAAC,GAAG,IAC/B,MAAe,WACZ;AACH,QAAM,QAAQ,IAAI,aAAa,QAAQ;AACvC,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,GAAG;AACxC,UAAM,UAAU,IAAI,OAAO,OAAO,IAAI,OAAO;AAC7C,UAAM,SAAS,KAAK;AACpB,UAAM,SAAS,KAAK;AACpB,cAAU;AAAA;AAEZ,SAAO;AAAA;AAGF,aAAM,sBAAsB,CAAC,UAAkB;AACpD,QAAM,QAAQ,IAAI,aAAa,QAAQ;AACvC,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,GAAG;AACxC,UAAM,UAAU;AAChB,UAAM,SAAS,KAAK;AACpB,cAAU;AAAA;AAEZ,SAAO;AAAA;AAGF,aAAM,sBAAsB,CACjC,OACA,SAA2B,CAAC,GAAG,IAC/B,MAAe,WACZ;AACH,QAAM,QAAQ,IAAI,aAAa;AAC/B,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,UAAM,KAAK,IAAI,OAAO,OAAO,IAAI,OAAO;AAAA;AAE1C,SAAO;AAAA;AAGF,aAAM,cAAc,CACzB,MACA,OACA,QACA,OAAe,MACZ;AACH,MAAI;AACJ,MAAI,SAAS,GAAG;AACd,aAAS;AAAA,aACA,SAAS,GAAG;AACrB,aAAS;AAAA,aACA,SAAS,GAAG;AACrB,aAAS;AAAA,aACA,SAAS,GAAG;AACrB,aAAS;AAAA;AAEX,SAAO,IAAI,YACT,MACA,OACA,QACA,QACA,WACA,WACA,qBACA,qBACA,eACA;AAAA;AAIG,aAAM,0BAA0B,CACrC,OACA,SACG;AACH,QAAM,QAAQ,IAAI,aAAa,QAAQ;AACvC,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,GAAG;AACxC,SAAK,OAAO;AACZ,cAAU;AAAA;AAEZ,SAAO;AAAA;AAGF,aAAM,yBAAyB,CACpC,OACA,QACA,SACG;AACH,QAAM,QAAQ,wBAAwB,QAAQ,QAAQ;AACtD,SAAO,YAAY,OAAO,OAAO,QAAQ;AAAA;AAGpC,aAAM,0BAA0B,CACrC,OACA,SACG;AACH,QAAM,QAAQ,IAAI,aAAa,QAAQ;AACvC,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,GAAG;AACxC,SAAK,OAAO;AACZ,cAAU;AAAA;AAEZ,SAAO;AAAA;AAGF,aAAM,yBAAyB,CACpC,OACA,QACA,SACG;AACH,QAAM,QAAQ,wBAAwB,QAAQ,QAAQ;AACtD,SAAO,YAAY,OAAO,OAAO,QAAQ;AAAA;",
  "names": []
}
