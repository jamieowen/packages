{
  "version": 3,
  "sources": ["/Users/jamieowen/Workspace/packages/packages/three/src/prefabs/dome-simple.ts"],
  "sourcesContent": ["import {\n  Object3D,\n  BackSide,\n  SphereBufferGeometry,\n  AmbientLight,\n  DirectionalLight,\n  HemisphereLight,\n  Matrix4,\n  CameraHelper,\n  MeshLambertMaterial,\n} from \"three\";\nimport { createMeshFactory, createLightHelpers } from \"../factory-fn\";\nimport { reactiveOptsFactory, ReactiveOpts } from \"@jamieowen/core\";\nimport { forceStream } from \"@jamieowen/motion\";\n\nconst mf = createMeshFactory();\n\nconst createDome = (parent: Object3D) => {\n  const dome = new SphereBufferGeometry(1, 20, 30).applyMatrix4(\n    new Matrix4().makeRotationX(Math.PI * -0.5)\n  );\n  mf.setGeometry(dome);\n  mf.lambertMaterial({\n    color: \"crimson\",\n    emissive: \"red\",\n    emissiveIntensity: 0.2,\n    side: BackSide,\n  });\n  return mf.mesh(parent);\n};\n\nconst createFloor = (parent: Object3D, color: string = \"crimson\") => {\n  // Floor\n  mf.lambertMaterial({\n    color: \"crimson\",\n    emissive: \"crimson\",\n    emissiveIntensity: 0.2,\n  });\n  mf.scale.multiplyScalar(10);\n  mf.plane();\n  const floor = mf.mesh(parent);\n  floor.rotation.x = Math.PI * -0.5;\n  return floor;\n};\n\ninterface DomeSimpleLightOpts {\n  color: string | number;\n  intensity: [number, number, number]; // amb/dir/hem\n  emissive?: {\n    intensity: [number, number]; // dome / floor\n    offset: [[number, number, number], [number, number, number]]; // dome / floor hsl\n  };\n  showHelpers: boolean;\n}\n\nexport const createDomeSimpleOpts = reactiveOptsFactory<DomeSimpleLightOpts>({\n  color: \"crimson\",\n  intensity: [0.2, 0.4, 0.3],\n  emissive: {\n    intensity: [0.1, 0.2], // dome / floor\n    offset: [\n      [0, 0, 0], // dome\n      [0, 0, 0], // floor\n    ],\n  },\n  showHelpers: true,\n});\n\n/**\n *\n * A mimimal dome and light setup.\n * Designed for reuse without major configurations.\n *\n * @param parent\n * @param opts\n */\nexport const createDomeSimpleLight = (\n  parent: Object3D,\n  opts: ReactiveOpts<DomeSimpleLightOpts> = createDomeSimpleOpts({})\n) => {\n  mf.scale.set(1, 1, 1);\n  const dome = createDome(parent);\n  dome.scale.multiplyScalar(30);\n\n  const floor = createFloor(parent);\n  floor.scale.multiplyScalar(10);\n  floor.receiveShadow = true;\n\n  const amb = new AmbientLight();\n  const dir = new DirectionalLight();\n  const hem = new HemisphereLight();\n  const lights = [amb, dir, hem];\n  parent.add(amb, hem, dir);\n\n  dir.castShadow = true;\n  dir.shadow.camera.far = 50;\n  dir.shadow.camera.near = 5;\n  dir.shadow.camera.left = -10;\n  dir.shadow.camera.right = 10;\n  dir.shadow.camera.top = 10;\n  dir.shadow.camera.bottom = -10;\n\n  const shadowHelper = new CameraHelper(dir.shadow.camera);\n  parent.add(shadowHelper);\n\n  dir.position.set(2, 4, 5).multiplyScalar(4);\n\n  const helpers = createLightHelpers(parent);\n  parent.add(helpers);\n\n  opts.subscribe({\n    next: ({ color, intensity, emissive, showHelpers }) => {\n      // Apply color\n      amb.intensity = intensity[0];\n      dir.intensity = intensity[1];\n      hem.intensity = intensity[2];\n\n      const dm = dome.material as MeshLambertMaterial;\n      const fm = floor.material as MeshLambertMaterial;\n\n      // Set color to the same\n      dm.color.set(color);\n      fm.color.set(color);\n\n      dm.emissive.set(color);\n      fm.emissive.set(color);\n\n      dm.emissiveIntensity = emissive.intensity[0];\n      fm.emissiveIntensity = emissive.intensity[1];\n\n      dm.emissive.offsetHSL.apply(dm.emissive, emissive.offset[0]);\n      fm.emissive.offsetHSL.apply(fm.emissive, emissive.offset[1]);\n\n      helpers.visible = showHelpers;\n      shadowHelper.visible = showHelpers;\n    },\n  });\n\n  opts.next({});\n\n  return {\n    opts,\n    dome,\n    lights,\n    floor,\n    helpers,\n  };\n};\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAGA,MAAM,KAAK;AAEX,MAAM,aAAa,CAAC,WAAqB;AACvC,QAAM,OAAO,IAAI,qBAAqB,GAAG,IAAI,IAAI,aAC/C,IAAI,UAAU,cAAc,KAAK,KAAK;AAExC,KAAG,YAAY;AACf,KAAG,gBAAgB;AAAA,IACjB,OAAO;AAAA,IACP,UAAU;AAAA,IACV,mBAAmB;AAAA,IACnB,MAAM;AAAA;AAER,SAAO,GAAG,KAAK;AAAA;AAGjB,MAAM,cAAc,CAAC,QAAkB,QAAgB,cAAc;AAEnE,KAAG,gBAAgB;AAAA,IACjB,OAAO;AAAA,IACP,UAAU;AAAA,IACV,mBAAmB;AAAA;AAErB,KAAG,MAAM,eAAe;AACxB,KAAG;AACH,QAAM,QAAQ,GAAG,KAAK;AACtB,QAAM,SAAS,IAAI,KAAK,KAAK;AAC7B,SAAO;AAAA;AAaF,aAAM,uBAAuB,oBAAyC;AAAA,EAC3E,OAAO;AAAA,EACP,WAAW,CAAC,KAAK,KAAK;AAAA,EACtB,UAAU;AAAA,IACR,WAAW,CAAC,KAAK;AAAA,IACjB,QAAQ;AAAA,MACN,CAAC,GAAG,GAAG;AAAA,MACP,CAAC,GAAG,GAAG;AAAA;AAAA;AAAA,EAGX,aAAa;AAAA;AAWR,aAAM,wBAAwB,CACnC,QACA,OAA0C,qBAAqB,QAC5D;AACH,KAAG,MAAM,IAAI,GAAG,GAAG;AACnB,QAAM,OAAO,WAAW;AACxB,OAAK,MAAM,eAAe;AAE1B,QAAM,QAAQ,YAAY;AAC1B,QAAM,MAAM,eAAe;AAC3B,QAAM,gBAAgB;AAEtB,QAAM,MAAM,IAAI;AAChB,QAAM,MAAM,IAAI;AAChB,QAAM,MAAM,IAAI;AAChB,QAAM,SAAS,CAAC,KAAK,KAAK;AAC1B,SAAO,IAAI,KAAK,KAAK;AAErB,MAAI,aAAa;AACjB,MAAI,OAAO,OAAO,MAAM;AACxB,MAAI,OAAO,OAAO,OAAO;AACzB,MAAI,OAAO,OAAO,OAAO;AACzB,MAAI,OAAO,OAAO,QAAQ;AAC1B,MAAI,OAAO,OAAO,MAAM;AACxB,MAAI,OAAO,OAAO,SAAS;AAE3B,QAAM,eAAe,IAAI,aAAa,IAAI,OAAO;AACjD,SAAO,IAAI;AAEX,MAAI,SAAS,IAAI,GAAG,GAAG,GAAG,eAAe;AAEzC,QAAM,UAAU,mBAAmB;AACnC,SAAO,IAAI;AAEX,OAAK,UAAU;AAAA,IACb,MAAM,CAAC,CAAE,OAAO,WAAW,UAAU,iBAAkB;AAErD,UAAI,YAAY,UAAU;AAC1B,UAAI,YAAY,UAAU;AAC1B,UAAI,YAAY,UAAU;AAE1B,YAAM,KAAK,KAAK;AAChB,YAAM,KAAK,MAAM;AAGjB,SAAG,MAAM,IAAI;AACb,SAAG,MAAM,IAAI;AAEb,SAAG,SAAS,IAAI;AAChB,SAAG,SAAS,IAAI;AAEhB,SAAG,oBAAoB,SAAS,UAAU;AAC1C,SAAG,oBAAoB,SAAS,UAAU;AAE1C,SAAG,SAAS,UAAU,MAAM,GAAG,UAAU,SAAS,OAAO;AACzD,SAAG,SAAS,UAAU,MAAM,GAAG,UAAU,SAAS,OAAO;AAEzD,cAAQ,UAAU;AAClB,mBAAa,UAAU;AAAA;AAAA;AAI3B,OAAK,KAAK;AAEV,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA;",
  "names": []
}
