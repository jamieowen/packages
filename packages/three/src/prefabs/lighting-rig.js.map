{
  "version": 3,
  "sources": ["/Users/jamieowen/Workspace/packages/packages/three/src/prefabs/lighting-rig.ts"],
  "sourcesContent": ["import {\n  Object3D,\n  Group,\n  PointLight,\n  DirectionalLight,\n  HemisphereLight,\n  AmbientLight,\n  SpotLight,\n  Light,\n  Spherical,\n} from \"three\";\nimport { reactiveOptsFactory } from \"@jamieowen/core\";\n\nconst linear = (t: number) => t;\ntype EasingFn = (t: number) => number;\ntype EasingType = \"linear\";\nconst EasingLookup: Record<EasingType, EasingFn> = {\n  linear,\n};\n\nexport interface LightingRigOpts {\n  count: number;\n  types: string;\n  radius: number;\n  intensityDist: EasingFn;\n  intensityMin: number;\n  intensityMax: number;\n  azimuthDist: EasingFn;\n  azimuthAngle: number;\n  azimuthVariance: number;\n  polarDist: EasingFn;\n  polarAngle: number;\n  polarVariance: number;\n}\n\nexport const createLightingRigOpts = reactiveOptsFactory<LightingRigOpts>({\n  count: 3,\n  types: \"HPD\",\n  radius: 10,\n  intensityDist: linear,\n  intensityMin: 0.1,\n  intensityMax: 1,\n  azimuthAngle: 45,\n  azimuthDist: linear,\n  azimuthVariance: 1,\n  polarAngle: 45,\n  polarDist: linear,\n  polarVariance: 1,\n});\n\nconst parseLights = (types: string) => {\n  return types.split(\"\").map((char: string) => {\n    switch (char) {\n      case \"A\":\n        return new AmbientLight();\n      case \"H\":\n        return new HemisphereLight();\n      case \"P\":\n        return new PointLight();\n      case \"D\":\n        return new DirectionalLight();\n      case \"S\":\n        return new SpotLight();\n      default:\n        console.warn(`Unrecognised light type '${char}'`);\n        return new Light();\n    }\n  });\n};\n\nconst distribute = (\n  lights: Light[],\n  ease: EasingFn,\n  apply: (light: Light, value: number) => void,\n  filter: (light: Light) => boolean = () => true\n) => {\n  const filtered = lights.filter(filter);\n  filtered.forEach((light, i) => {\n    const value = ease(i / (filtered.length - 1) || 0);\n    apply(light, value);\n  });\n};\n\nconst assignIntensity = (lights: Light[], opts: LightingRigOpts) => {\n  distribute(lights, opts.intensityDist, (light, value) => {\n    light.intensity =\n      opts.intensityMin + value * (opts.intensityMax - opts.intensityMin);\n  });\n};\n\nconst filterAngleLights = (light: any) =>\n  !light.isHemisphereLight && !light.isAmbientLight;\n\nconst toRadians = Math.PI / 180;\nconst assignAngles = (\n  lights: Light[],\n  sph: Spherical,\n  opts: LightingRigOpts\n) => {\n  const filtered = lights.filter(filterAngleLights);\n  const len = filtered.length;\n\n  for (let i = 0; i < len; i++) {\n    const N = i / (len - 1) || 0;\n    const theE = opts.azimuthDist(N);\n    const phiE = opts.polarDist(N);\n    const phiStart = opts.polarAngle * toRadians;\n    const theStart = opts.azimuthAngle * toRadians;\n\n    sph.set(\n      opts.radius,\n      phiStart + phiE * (Math.PI * opts.polarVariance),\n      theStart + theE * (Math.PI * 2.0 * opts.azimuthVariance)\n    );\n\n    const light = filtered[i];\n    light.position.setFromSpherical(sph);\n  }\n};\n\nexport const createLightingRig = (\n  parent: Object3D,\n  opts: ReturnType<typeof createLightingRigOpts>\n) => {\n  const group = new Group();\n  parent.add(group);\n  const sphHelper = new Spherical();\n\n  const lights = {\n    types: \"none\",\n    lights: [] as Light[],\n  };\n  // Would be nice to split streams across properties.\n  // As some invalidation system\n  // Later...\n  // Look at @thi.ng/atom\n  opts.subscribe({\n    next: (opts) => {\n      if (lights.types !== opts.types) {\n        lights.lights.forEach((l) => group.remove(l));\n        lights.lights = parseLights(opts.types);\n        lights.lights.forEach((l) => group.add(l));\n        lights.types = opts.types;\n        // console.log(\"update lights\");\n      }\n      lights.lights.forEach((l) => {\n        if (l.type !== \"AmbientLight\" && l.type !== \"HemisphereLight\") {\n          l.castShadow = true;\n        }\n      });\n      assignIntensity(lights.lights, opts);\n      assignAngles(lights.lights, sphHelper, opts);\n    },\n    error: (err) => {\n      throw err;\n    },\n  });\n  // .subscribe(trace(\"Update Opts\"));\n\n  return {\n    lights: lights.lights,\n    group,\n  };\n};\n"],
  "mappings": "AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAEA,MAAM,SAAS,CAAC,MAAc;AAG9B,MAAM,eAA6C;AAAA,EACjD;AAAA;AAkBK,aAAM,wBAAwB,oBAAqC;AAAA,EACxE,OAAO;AAAA,EACP,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,eAAe;AAAA,EACf,cAAc;AAAA,EACd,cAAc;AAAA,EACd,cAAc;AAAA,EACd,aAAa;AAAA,EACb,iBAAiB;AAAA,EACjB,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,eAAe;AAAA;AAGjB,MAAM,cAAc,CAAC,UAAkB;AACrC,SAAO,MAAM,MAAM,IAAI,IAAI,CAAC,SAAiB;AAC3C,YAAQ;AAAA,WACD;AACH,eAAO,IAAI;AAAA,WACR;AACH,eAAO,IAAI;AAAA,WACR;AACH,eAAO,IAAI;AAAA,WACR;AACH,eAAO,IAAI;AAAA,WACR;AACH,eAAO,IAAI;AAAA;AAEX,gBAAQ,KAAK,4BAA4B;AACzC,eAAO,IAAI;AAAA;AAAA;AAAA;AAKnB,MAAM,aAAa,CACjB,QACA,MACA,OACA,SAAoC,MAAM,SACvC;AACH,QAAM,WAAW,OAAO,OAAO;AAC/B,WAAS,QAAQ,CAAC,OAAO,MAAM;AAC7B,UAAM,QAAQ,KAAK,IAAK,UAAS,SAAS,MAAM;AAChD,UAAM,OAAO;AAAA;AAAA;AAIjB,MAAM,kBAAkB,CAAC,QAAiB,SAA0B;AAClE,aAAW,QAAQ,KAAK,eAAe,CAAC,OAAO,UAAU;AACvD,UAAM,YACJ,KAAK,eAAe,QAAS,MAAK,eAAe,KAAK;AAAA;AAAA;AAI5D,MAAM,oBAAoB,CAAC,UACzB,CAAC,MAAM,qBAAqB,CAAC,MAAM;AAErC,MAAM,YAAY,KAAK,KAAK;AAC5B,MAAM,eAAe,CACnB,QACA,KACA,SACG;AACH,QAAM,WAAW,OAAO,OAAO;AAC/B,QAAM,MAAM,SAAS;AAErB,WAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,UAAM,IAAI,IAAK,OAAM,MAAM;AAC3B,UAAM,OAAO,KAAK,YAAY;AAC9B,UAAM,OAAO,KAAK,UAAU;AAC5B,UAAM,WAAW,KAAK,aAAa;AACnC,UAAM,WAAW,KAAK,eAAe;AAErC,QAAI,IACF,KAAK,QACL,WAAW,OAAQ,MAAK,KAAK,KAAK,gBAClC,WAAW,OAAQ,MAAK,KAAK,IAAM,KAAK;AAG1C,UAAM,QAAQ,SAAS;AACvB,UAAM,SAAS,iBAAiB;AAAA;AAAA;AAI7B,aAAM,oBAAoB,CAC/B,QACA,SACG;AACH,QAAM,QAAQ,IAAI;AAClB,SAAO,IAAI;AACX,QAAM,YAAY,IAAI;AAEtB,QAAM,SAAS;AAAA,IACb,OAAO;AAAA,IACP,QAAQ;AAAA;AAMV,OAAK,UAAU;AAAA,IACb,MAAM,CAAC,UAAS;AACd,UAAI,OAAO,UAAU,MAAK,OAAO;AAC/B,eAAO,OAAO,QAAQ,CAAC,MAAM,MAAM,OAAO;AAC1C,eAAO,SAAS,YAAY,MAAK;AACjC,eAAO,OAAO,QAAQ,CAAC,MAAM,MAAM,IAAI;AACvC,eAAO,QAAQ,MAAK;AAAA;AAGtB,aAAO,OAAO,QAAQ,CAAC,MAAM;AAC3B,YAAI,EAAE,SAAS,kBAAkB,EAAE,SAAS,mBAAmB;AAC7D,YAAE,aAAa;AAAA;AAAA;AAGnB,sBAAgB,OAAO,QAAQ;AAC/B,mBAAa,OAAO,QAAQ,WAAW;AAAA;AAAA,IAEzC,OAAO,CAAC,QAAQ;AACd,YAAM;AAAA;AAAA;AAKV,SAAO;AAAA,IACL,QAAQ,OAAO;AAAA,IACf;AAAA;AAAA;",
  "names": []
}
