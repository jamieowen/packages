{
  "version": 3,
  "sources": ["/Users/jamieowen/Workspace/packages/packages/three/src/interaction/gesture-stream-3d.ts"],
  "sourcesContent": ["import { Subscription } from \"@thi.ng/rstream\";\nimport {\n  GestureEvent,\n  gestureStream,\n  GestureStreamOpts,\n  GestureType,\n  GestureStream,\n} from \"@thi.ng/rstream-gestures\";\nimport { map } from \"@thi.ng/transducers\";\nimport { Raycaster, Plane, Camera, Vector3 } from \"three\";\nimport { resizeObserverStream } from \"@jamieowen/browser\";\n\n// import { ConsoleLogger, LogLevel } from \"@thi.ng/api\";\n// import { setLogger } from \"@thi.ng/rstream\";\n\n// set package specific logger instance\n// setLogger(new ConsoleLogger(\"rstream\", LogLevel.WARN));\n\nexport type { GestureType, GestureEvent, GestureStreamOpts, GestureStream };\n\nexport interface GestureEvent3D extends GestureEvent {\n  raycaster: Raycaster;\n  position: Vector3;\n  isDown: boolean;\n  is3d: boolean;\n  plane: Plane;\n  ndc: Vector3;\n  setPlaneNormal: (x: number, y: number, z: number) => void;\n}\n\nexport interface GestureStream3DOpts extends GestureStreamOpts {\n  normal: [number, number, number];\n}\n\nexport type GestureStream3D = Subscription<GestureEvent, GestureEvent3D>;\n\nexport const gestureStream3d = (\n  domElement: HTMLElement,\n  camera: Camera,\n  resize: ReturnType<typeof resizeObserverStream>,\n  opts: Partial<GestureStream3DOpts> = {}\n): GestureStream3D => {\n  const { normal = [0, 1, 0], ..._opts } = opts;\n\n  const raycaster = new Raycaster();\n  const position = new Vector3(0, 0, 0);\n  const norm = new Vector3();\n  norm.fromArray(normal);\n  const plane = new Plane(norm);\n  const ndc = new Vector3();\n  const setPlaneNormal = (x: number, y: number, z: number) => {\n    norm.set(x, y, z);\n    plane.set(norm, 0);\n  };\n\n  return gestureStream(domElement, {\n    ..._opts,\n    eventOpts: {},\n  }).transform(\n    map((event) => {\n      const { width, height } = resize.deref();\n      const { pos } = event;\n      const [x, y] = pos;\n      ndc.x = (x / width) * 2.0 - 1.0;\n      ndc.y = -(y / height) * 2.0 + 1.0;\n      raycaster.setFromCamera(ndc, camera);\n      raycaster.ray.intersectPlane(plane, position);\n\n      return {\n        ...event,\n        ndc,\n        isDown: event.active.length > 0,\n        plane,\n        raycaster,\n        is3d: true,\n        position,\n        pos: position.toArray(),\n        setPlaneNormal,\n      };\n    })\n  );\n};\n"],
  "mappings": "AACA;AAAA;AAAA;AAOA;AACA;AA2BO,aAAM,kBAAkB,CAC7B,YACA,QACA,QACA,OAAqC,OACjB;AACpB,QAAM,CAAE,SAAS,CAAC,GAAG,GAAG,OAAO,SAAU;AAEzC,QAAM,YAAY,IAAI;AACtB,QAAM,WAAW,IAAI,QAAQ,GAAG,GAAG;AACnC,QAAM,OAAO,IAAI;AACjB,OAAK,UAAU;AACf,QAAM,QAAQ,IAAI,MAAM;AACxB,QAAM,MAAM,IAAI;AAChB,QAAM,iBAAiB,CAAC,GAAW,GAAW,MAAc;AAC1D,SAAK,IAAI,GAAG,GAAG;AACf,UAAM,IAAI,MAAM;AAAA;AAGlB,SAAO,cAAc,YAAY;AAAA,OAC5B;AAAA,IACH,WAAW;AAAA,KACV,UACD,IAAI,CAAC,UAAU;AACb,UAAM,CAAE,OAAO,UAAW,OAAO;AACjC,UAAM,CAAE,OAAQ;AAChB,UAAM,CAAC,GAAG,KAAK;AACf,QAAI,IAAK,IAAI,QAAS,IAAM;AAC5B,QAAI,IAAI,CAAE,KAAI,UAAU,IAAM;AAC9B,cAAU,cAAc,KAAK;AAC7B,cAAU,IAAI,eAAe,OAAO;AAEpC,WAAO;AAAA,SACF;AAAA,MACH;AAAA,MACA,QAAQ,MAAM,OAAO,SAAS;AAAA,MAC9B;AAAA,MACA;AAAA,MACA,MAAM;AAAA,MACN;AAAA,MACA,KAAK,SAAS;AAAA,MACd;AAAA;AAAA;AAAA;",
  "names": []
}
